.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode _root
LDMSGADDR
ENDS
;; param: _root
; modifier acc
ACCEPT
; constructor DensTest
; expValue
; end expValue
;; push identifier _root
; colValue
; end colValue
; end constructor DensTest
; end modifier acc
SETGLOB 10
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro receive_macro
; function receive
; end function receive
IFREF {
	CALL $c7_to_c4$
}

.macro fallback_macro
; function fallback
; end function fallback
THROW 191

.macro setValue
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
; Decode value
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: dest
;; param: value
; modifier acc
ACCEPT
; function setValue
;; Remote call DensCertificate.setValue
;; push identifier dest
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x39896800000000000000000000000000001c07f5f1_
STSLICER
;; new_value
;; push identifier value
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; end function setValue
; end modifier acc
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setTarget
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
; Decode typ
LDI 16
; Decode value
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: dest
;; param: typ
;; param: value
; modifier acc
ACCEPT
; function setTarget
;; Remote call DensCertificate.setTarget
;; push identifier dest
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x39896800000000000000000000000000003bd174df_
STSLICER
;; rec_type
;; push identifier typ
PUSH S2
STIR 16
;; new_value
;; push identifier value
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; end function setTarget
; end modifier acc
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro transferOwner
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
; Decode new_owner
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: dest
;; param: new_owner
; modifier acc
ACCEPT
; function transferOwner
;; Remote call DensCertificate.transferOwner
;; push identifier dest
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x39896800000000000000000000000000003619b259_
STSLICER
;; new_owner
;; push identifier new_owner
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; end function transferOwner
; end modifier acc
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro acceptOwner
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
ENDS
;; param: dest
; modifier acc
ACCEPT
; function acceptOwner
;; Remote call DensCertificate.acceptOwner
;; push identifier dest
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000d7aac063_
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; end function acceptOwner
; end modifier acc
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro regName
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode req
;; decode struct RegRequest req
;; decode RegRequest.name
LDREF
;; decode RegRequest.duration
LDU 32
;; decode RegRequest.hash
LDU 256
;; build struct RegRequest ss:4
BLKSWAP 3, 1
TUPLE 3
SWAP
; Decode amount
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode nonce
LDUQ 256
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: req
;; param: amount
;; param: nonce
; modifier acc
ACCEPT
; function regName
NEWC
;; decl: b
; expValue
DUP
; end expValue
MYADDR
STSLICER
;; push identifier amount
PUSH S3
STUR 128
;; push identifier nonce
PUSH S2
STUR 256
; colValue
NIP
; end colValue
;; push identifier b
DUP
ENDC
HASHCU
; expValue
PUSH S4
; end expValue
SWAP
; colValue
SETINDEX 2
POP S4
; end colValue
;; Remote call IDensRoot.regName
;; push identifier root
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x5012a05f2000000000000000000000000000006114ccf1_
STSLICER
;; callbackFunctionId
PUSHINT 708059340
STUR 32
;; request
;; push identifier req
PUSH S4
UNTUPLE 3
BLKSWAP 1, 3
PUSH S3
STREFR
PUSH S2
STUR 32
PUSH S1
STUR 256
BLKDROP2 3, 1
ENDC
PUSHINT 0
SENDRAWMSG
; end function regName
; end modifier acc
BLKDROP 4
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro regNameCallback
DROP
; Decode input parameters
; Decode b
LDI 1
; Decode u
LDU 8
; Decode a
LDMSGADDR
ENDS
;; param: b
;; param: u
;; param: a
; function regNameCallback
NEWC
NULL
TUPLE 2
NEWC
PUSHSLICE x7265674e616d6520726573706f6e73653a206f6b3d
CALLREF {
	CALL $storeStringInBuilders_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
;; push identifier b
PUSH S4
PUSHCONT {
	PUSHINT 1
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
PUSHSLICE x2c20636f64653d
CALLREF {
	CALL $storeStringInBuilders_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
;; push identifier u
PUSH S3
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
PUSHSLICE x2c20616464723d
CALLREF {
	CALL $storeStringInBuilders_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
;; push identifier a
PUSH S2
CALLREF {
	CALL $convertAddressToHexString_macro$
}
CALLREF {
	CALL $assembleList_macro$
}
CTOS
STRDUMP
; end function regNameCallback
BLKDROP 4
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro bid
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
; Decode amount
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode nonce
LDUQ 256
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: dest
;; param: amount
;; param: nonce
; modifier acc
ACCEPT
; function bid
NEWC
;; decl: b
; expValue
DUP
; end expValue
MYADDR
STSLICER
;; push identifier amount
PUSH S3
STUR 128
;; push identifier nonce
PUSH S2
STUR 256
; colValue
NIP
; end colValue
;; push identifier b
DUP
ENDC
HASHCU
;; decl: hash
;; Remote call IDensAuction.bid
;; push identifier dest
PUSH S4
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000000b3b812beb2e6584b_
STSLICER
;; hash
;; push identifier hash
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; end function bid
; end modifier acc
BLKDROP 5
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro bidCallback
DROP
; Decode input parameters
; Decode res
LDI 1
ENDS
;; param: res
; function bidCallback
NEWC
NULL
TUPLE 2
NEWC
PUSHSLICE x61756374696f6e2062696420726573706f6e73653a206f6b3d
CALLREF {
	CALL $storeStringInBuilders_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
;; push identifier res
PUSH S2
PUSHCONT {
	PUSHINT 1
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
CALLREF {
	CALL $assembleList_macro$
}
CTOS
STRDUMP
; end function bidCallback
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro bid2
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
; Decode amount
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode nonce
LDUQ 256
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: dest
;; param: amount
;; param: nonce
; modifier acc
ACCEPT
; function bid2
NEWC
;; decl: b
; expValue
DUP
; end expValue
MYADDR
STSLICER
;; push identifier amount
PUSH S3
STUR 128
;; push identifier nonce
PUSH S2
STUR 256
; colValue
NIP
; end colValue
;; push identifier b
DUP
ENDC
HASHCU
;; decl: hash
;; Remote call IDensBid.bid
;; push identifier dest
PUSH S4
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000000b3b812becfa18c69_
STSLICER
;; hash_val
;; push identifier hash
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; end function bid2
; end modifier acc
BLKDROP 5
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro bid2Callback
DROP
; Decode input parameters
; Decode res
LDI 1
ENDS
;; param: res
; function bid2Callback
NEWC
NULL
TUPLE 2
NEWC
PUSHSLICE x6269642062696420726573706f6e73653a206f6b3d
CALLREF {
	CALL $storeStringInBuilders_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
;; push identifier res
PUSH S2
PUSHCONT {
	PUSHINT 1
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
CALLREF {
	CALL $assembleList_macro$
}
CTOS
STRDUMP
; end function bid2Callback
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro reveal
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
; Decode amount
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode nonce
LDUQ 256
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: dest
;; param: amount
;; param: nonce
; modifier acc
ACCEPT
; function reveal
;; Remote call IDensBid.reveal
;; push identifier amount
PUSH S1
;; +
PUSHINT 1000000000
ADD
UFITS 128
;; push identifier dest
PUSH S3
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHSLICE x000000000000000000000000000b78d8cff_
STSLICER
;; amount
;; push identifier amount
PUSH S2
STUR 128
;; nonce
;; push identifier nonce
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; end function reveal
; end modifier acc
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro finalize
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
ENDS
;; param: dest
; modifier acc
ACCEPT
; function finalize
;; Remote call IDensAuction.finalize
;; push identifier dest
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca00000000000000000000000000000ef036e16d3ccc96b_
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; end function finalize
; end modifier acc
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro finalizeCallback
DROP
; Decode input parameters
; Decode res
LDI 1
ENDS
;; param: res
; function finalizeCallback
NEWC
NULL
TUPLE 2
NEWC
PUSHSLICE x66696e616c697a6520726573706f6e73653a206f6b3d
CALLREF {
	CALL $storeStringInBuilders_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
;; push identifier res
PUSH S2
PUSHCONT {
	PUSHINT 1
}
PUSHCONT {
	PUSHINT 0
}
IFELSE
PUSHINT 0
FALSE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
CALLREF {
	CALL $appendToList_macro$
}
CALLREF {
	CALL $assembleList_macro$
}
CTOS
STRDUMP
; end function finalizeCallback
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro requestSubCertificate
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
; Decode name
LDREF
; Decode expiry
LDU 32
ENDS
;; param: dest
;; param: name
;; param: expiry
; modifier acc
ACCEPT
; function requestSubCertificate
;; Remote call IDensCertificate.subCertRequest
;; push identifier dest
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000f5098e4d_
STSLICER
;; subname
;; push identifier name
PUSH S2
STREFR
;; subexpiry
;; push identifier expiry
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
; end function requestSubCertificate
; end modifier acc
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro syncSubCertificate
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
; Decode name
LDREF
; Decode expiry
LDU 32
ENDS
;; param: dest
;; param: name
;; param: expiry
; modifier acc
ACCEPT
; function syncSubCertificate
;; Remote call IDensCertificate.subCertSynchronize
;; push identifier dest
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000ae0dd0d1_
STSLICER
;; subname
;; push identifier name
PUSH S2
STREFR
;; subexpiry
;; push identifier expiry
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
; end function syncSubCertificate
; end modifier acc
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro withdraw
DROP
; Decode input parameters
; Decode dest
LDMSGADDR
ENDS
;; param: dest
; modifier acc
ACCEPT
; function withdraw
;; Remote call IDensBid.withdraw
;; push identifier dest
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x43b9aca000000000000000000000000000005f68e417_
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; end function withdraw
; end modifier acc
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
SWAP
STSLICE
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
PLDU 4
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDUQ 32  ; [funcId] body' ok
PUSHCONT {
	; body'
	DROP
	CALLREF {
		CALL $fallback_macro$
	}
	THROW 0
}
IFNOT
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.internal-alias :main_external, -1
.internal :main_external
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.macro public_function_selector
DUP
PUSHINT 708059340
LEQ
PUSHCONT {
	DUP
	PUSHINT 346897324
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 334453452
		EQUAL
		IFJMPREF {
			CALL $setTarget$
		}
		DUP
		PUSHINT 346897324
		EQUAL
		IFJMPREF {
			CALL $setValue$
		}
	}
	IFJMP
	DUP
	PUSHINT 581309056
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 412121449
		EQUAL
		IFJMPREF {
			CALL $transferOwner$
		}
		DUP
		PUSHINT 581309056
		EQUAL
		IFJMPREF {
			CALL $finalize$
		}
	}
	IFJMP
	DUP
	PUSHINT 708059340
	EQUAL
	IFJMPREF {
		CALL $regNameCallback$
	}
}
IFJMP
DUP
PUSHINT 1196840156
LEQ
PUSHCONT {
	DUP
	PUSHINT 920926816
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 735968502
		EQUAL
		IFJMPREF {
			CALL $syncSubCertificate$
		}
		DUP
		PUSHINT 920926816
		EQUAL
		IFJMPREF {
			CALL $reveal$
		}
	}
	IFJMP
	DUP
	PUSHINT 1188758641
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1114027814
		EQUAL
		IFJMPREF {
			CALL $acceptOwner$
		}
		DUP
		PUSHINT 1188758641
		EQUAL
		IFJMPREF {
			CALL $regName$
		}
	}
	IFJMP
	DUP
	PUSHINT 1196840156
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
}
IFJMP
DUP
PUSHINT 2035176671
LEQ
PUSHCONT {
	DUP
	PUSHINT 1540240414
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1500720165
		EQUAL
		IFJMPREF {
			CALL $bidCallback$
		}
		DUP
		PUSHINT 1540240414
		EQUAL
		IFJMPREF {
			CALL $requestSubCertificate$
		}
	}
	IFJMP
	DUP
	PUSHINT 1776706741
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1741735476
		EQUAL
		IFJMPREF {
			CALL $bid2Callback$
		}
		DUP
		PUSHINT 1776706741
		EQUAL
		IFJMPREF {
			CALL $finalizeCallback$
		}
	}
	IFJMP
	DUP
	PUSHINT 2035176671
	EQUAL
	IFJMPREF {
		CALL $bid$
	}
}
IFJMP
DUP
PUSHINT 2092542765
LEQ
PUSHCONT {
	DUP
	PUSHINT 2072717662
	EQUAL
	IFJMPREF {
		CALL $withdraw$
	}
	DUP
	PUSHINT 2092542765
	EQUAL
	IFJMPREF {
		CALL $bid2$
	}
}
IFJMP
