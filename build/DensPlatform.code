.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor DensPlatform
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 99
ACCEPT
; end constructor DensPlatform
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro initialize
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
; Decode owner
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: code
;; param: owner
; function initialize
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 99
ACCEPT
;; push identifier code
PUSH S1
SETCODE
;; push identifier code
PUSH S1
CTOS
PLDREF
CTOS
BLESS
POP c3
NEWC
;; decl: b
; expValue
DUP
; end expValue
;; push identifier root
GETGLOB 10
STSLICER
;; push identifier name
GETGLOB 12
STREFR
;; push identifier owner
PUSH S2
STSLICER
;; push identifier parent
GETGLOB 13
STSLICER
; colValue
NIP
; end colValue
;; push identifier b
DUP
ENDC
CALLREF {
	CALL $:onCodeUpgrade$
}
; end function initialize
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.internal-alias :onCodeUpgrade, 2
.internal :onCodeUpgrade
;; param: data
; function onCodeUpgrade
; end function onCodeUpgrade
DROP
CALLREF {
	CALL $c7_to_c4$
}
COMMIT
THROW 0

.macro inquiryExpiry
DROP
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode rhash
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: rhash
; function inquiryExpiry
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier rhash
DUP
PUSHINT 0
; end function inquiryExpiry
BLKDROP2 1, 2
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000002301fd10a_
	STSLICER
	PUSH S2
	STUR 128
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	STUR 128
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro destroy
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; function destroy
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 99
;; Remote call IAddBalance.addBalance
;; push identifier root
GETGLOB 10
FALSE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x00000000000000000000000000006347f9a7_
STSLICER
ENDC
PUSHINT 160
SENDRAWMSG
; end function destroy
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
REVERSE 5, 0
STSLICE
STU 8
STREF
STSLICE
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDMSGADDR
LDU 8
LDREF
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDMSGADDR
	LDU 8
	LDREF
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init root
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 10
	; init type_id
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 8
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 11
	; init name
	PUSHINT 3
	PUSH S1
	PUSHINT 64
	DICTUGETREF
	PUSHCONT {
		PUSHREF {
		}
	}
	IFNOT
	SETGLOB 12
	; init parent
	PUSHINT 4
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 13
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDUQ 32  ; [funcId] body' ok
THROWIFNOT 60 ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro root
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 10
PUSHSLICE xc0000000000000000000000000b7295e20
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro type_id
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 11
PUSHSLICE xc000000000000000000000000096c38030
NEWC
STSLICE
PUSH S1
STUR 8
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro name
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 12
PUSHSLICE xc0000000000000000000000000f985b3f4
NEWC
STSLICE
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro parent
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
PUSHSLICE xc00000000000000000000000008d8f2ca0
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 227486880
LEQ
PUSHCONT {
	DUP
	PUSHINT 201847874
	EQUAL
	IFJMPREF {
		CALL $inquiryExpiry$
	}
	DUP
	PUSHINT 227486880
	EQUAL
	IFJMPREF {
		CALL $parent$
	}
}
IFJMP
DUP
PUSHINT 629528867
LEQ
PUSHCONT {
	DUP
	PUSHINT 381911088
	EQUAL
	IFJMPREF {
		CALL $type_id$
	}
	DUP
	PUSHINT 629528867
	EQUAL
	IFJMPREF {
		CALL $destroy$
	}
}
IFJMP
DUP
PUSHINT 1238060340
LEQ
PUSHCONT {
	DUP
	PUSHINT 925457952
	EQUAL
	IFJMPREF {
		CALL $root$
	}
	DUP
	PUSHINT 1238060340
	EQUAL
	IFJMPREF {
		CALL $initialize$
	}
}
IFJMP
DUP
PUSHINT 2038805492
LEQ
PUSHCONT {
	DUP
	PUSHINT 1756716863
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
	DUP
	PUSHINT 2038805492
	EQUAL
	IFJMPREF {
		CALL $name$
	}
}
IFJMP
