.globl	constructor
.public	constructor
.type	constructor, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor DensRoot
GETGLOB 2
NEQINT 0
THROWIFNOT 101
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
GETGLOB 2
EQUAL
THROWIFNOT 100
ACCEPT
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
; expValue
; end expValue
; colValue
SETGLOB 13
; end colValue
; end constructor DensRoot
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	fallback
.type	fallback, @function
; function fallback
THROW 100
; end function fallback
IFREF {
	CALL $c7_to_c4$
}

.globl	addBalance
.public	addBalance
.type	addBalance, @function
; Decode input parameters
ENDS
; function addBalance
;; emit balanceAdded
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x2a1cc7aa
;; donor
;; get member sender
GETGLOB 9
STSLICER
;; value
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
; end function addBalance
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	installPlatform
.public	installPlatform
.type	installPlatform, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 13
EQUAL
THROWIFNOT 100
ACCEPT
; function installPlatform
; expValue
; end expValue
;; push identifier code
DUP
; colValue
SETGLOB 10
; end colValue
;; emit platformCodeUpdated
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x77e12fd0
;; hash
;; push identifier code
PUSH S1
HASHCU
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; end function installPlatform
DROP
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	installCertificate
.public	installCertificate
.type	installCertificate, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 13
EQUAL
THROWIFNOT 100
ACCEPT
; function installCertificate
; expValue
; end expValue
;; push identifier code
DUP
; colValue
SETGLOB 11
; end colValue
;; emit certificateCodeUpdated
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x18908882
;; hash
;; push identifier code
PUSH S1
HASHCU
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; end function installCertificate
DROP
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	installAuction
.public	installAuction
.type	installAuction, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 13
EQUAL
THROWIFNOT 100
ACCEPT
; function installAuction
; expValue
; end expValue
;; push identifier code
DUP
; colValue
SETGLOB 12
; end colValue
;; emit auctionCodeUpdated
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x23fb1d93
;; hash
;; push identifier code
PUSH S1
HASHCU
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; end function installAuction
DROP
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	upgrade
.public	upgrade
.type	upgrade, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 13
EQUAL
THROWIFNOT 100
ACCEPT
; function upgrade
NEWC
;; decl: b
; expValue
DUP
; end expValue
;; push identifier platform_code
GETGLOB 10
STREFR
;; push identifier certificate_code
GETGLOB 11
STREFR
;; push identifier auction_code
GETGLOB 12
STREFR
;; push identifier owner
GETGLOB 13
STUR 256
;; push identifier pending_owner
GETGLOB 14
STUR 256
; colValue
NIP
; end colValue
;; emit rootCodeUpdated
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1db34797
;; hash
;; push identifier code
PUSH S2
HASHCU
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
;; push identifier code
PUSH S1
SETCODE
;; push identifier code
PUSH S1
CTOS
BLESS
POP c3
;; push identifier b
DUP
ENDC
CALL $:onCodeUpgrade$
DROP
; end function upgrade
DROP
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.internal-alias :onCodeUpgrade,        2
.internal	:onCodeUpgrade
PUSHINT 1
CALL 1
;; param: data
; function onCodeUpgrade
DROP
; end function onCodeUpgrade
CALLREF {
	CALL $c7_to_c4$
}
COMMIT
THROW 0

.globl	requestCertificateUpgrade
.public	requestCertificateUpgrade
.type	requestCertificateUpgrade, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; function requestCertificateUpgrade
;; emit certCodeUpgraded
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x292707c2
;; cert
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IUpgradable.upgrade
;; get member sender
GETGLOB 9
FALSE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x17230c3a
;; code
;; push identifier certificate_code
GETGLOB 11
STREFR
ENDC
PUSHINT 64
SENDRAWMSG
; end function requestCertificateUpgrade
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	reserveName
.public	reserveName
.type	reserveName, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode until
LDU 32
ENDS
;; param: name
;; param: until
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 13
EQUAL
THROWIFNOT 100
ACCEPT
; function reserveName
;; if
;; push identifier until
DUP
EQINT 1
PUSHCONT {
	; expValue
	; end expValue
	PUSHINT 4294967295
	; colValue
	NIP
	; end colValue
}
IF
;; end if
;; emit nameReserved
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x5349352d
;; name
;; push identifier name
PUSH S2
STREFR
;; until
;; push identifier until
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
;; if
;; push identifier until
DUP
;; <
;; push identifier now
NOW
LESS
PUSHCONT {
	;; delete
	; expValue
	;; fetch reserved
	GETGLOB 18
	;; push identifier name
	PUSH S2
	HASHCU
	SWAP
	; end expValue
	PUSH S1
	SWAP
	PUSHINT 256
	DICTUDEL
	DROP
	; colValue
	NIP
	SETGLOB 18
	; end colValue
}
PUSHCONT {
	; expValue
	;; fetch reserved
	GETGLOB 18
	;; push identifier name
	PUSH S2
	HASHCU
	SWAP
	; end expValue
	;; push identifier until
	PUSH S2
	; colValue
	NEWC
	STU 32
	ROTREV
	PUSHINT 256
	DICTUSETB
	SETGLOB 18
	; end colValue
}
IFELSE
;; end if
; end function reserveName
DROP2
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	_resolve_internal
.type	_resolve_internal, @function
;; param: name
;; param: type_id
;; param: parent
; function _resolve
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier name
PUSH S3
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
;; push identifier parent
PUSH S1
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 10
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
XCHG s4
BLKDROP 4
; end function _resolve

.globl	resolve
.public	resolve
.type	resolve, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
ENDS
;; param: name
; function resolve
;; return
;; push identifier name
DUP
PUSHINT 1
MYADDR
CALL $_resolve_internal$
NIP
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf073c6c8
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
; end function resolve
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	resolveRPC
.public	resolveRPC
.type	resolveRPC, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode name
LDREF
; Decode cert
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode ptype
LDUQ 8
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
ENDS
;; param: name
;; param: cert
;; param: ptype
; function resolveRPC
;; if
;; push identifier cert
PUSH S1
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SDEQ
PUSHCONT {
	MYADDR
	; expValue
	; end expValue
	; colValue
	POP S2
	; end colValue
}
IF
;; end if
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier name
PUSH S2
;; push identifier ptype
PUSH S1
;; push identifier cert
PUSH S3
CALL $_resolve_internal$
XCHG s3
BLKDROP 3
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xe03b7e24
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
; end function resolveRPC
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	resolveSub
.public	resolveSub
.type	resolveSub, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode cert
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: name
;; param: cert
; function resolveSub
;; return
;; push identifier name
PUSH S1
PUSHINT 1
;; push identifier cert
PUSH S2
CALL $_resolve_internal$
NIP
NIP
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xd0838829
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
; end function resolveSub
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	auction
.public	auction
.type	auction, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
ENDS
;; param: name
; function auction
;; return
;; push identifier name
DUP
PUSHINT 2
MYADDR
CALL $_resolve_internal$
NIP
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xec4d8e20
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
; end function auction
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	gc
.public	gc
.type	gc, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 13
EQUAL
THROWIFNOT 100
ACCEPT
; function gc
;; delete
; expValue
; end expValue
NEWDICT
; colValue
SETGLOB 15
; end colValue
;; delete
; expValue
; end expValue
NEWDICT
; colValue
SETGLOB 16
; end colValue
; expValue
; end expValue
;; push identifier now
NOW
; colValue
SETGLOB 17
; end colValue
;; emit garbage_collected
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x43e0048f
ENDC
PUSHINT 0
SENDRAWMSG
; end function gc
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	regName
.public	regName
.type	regName, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode callbackFunctionId
LDU 32
; Decode request
;; decode struct RegRequest request
;; decode RegRequest.name
LDREF
;; decode RegRequest.duration
LDU 32
;; decode RegRequest.hash
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; build struct RegRequest ss:5
BLKSWAP 3, 1
TUPLE 3
SWAP
ENDS
;; param: callbackFunctionId
;; param: request
; function regName
PUSHCONT {
	;; get member value
	CALLREF {
		CALL $message_balance_macro$
	}
	;; >=
	PUSHINT 5000000000
	GEQ
	THROWIFNOT 102
	PUSHINT 0
	;; decl: fail
	;; if
	;; get member duration
	;; push identifier request
	PUSH S1
	INDEX 1
	LESSINT 1
	PUSHCONT {
		; expValue
		; end expValue
		PUSHINT 201
		; colValue
		NIP
		; end colValue
	}
	IF
	;; end if
	;; if
	;; get member duration
	;; push identifier request
	PUSH S1
	INDEX 1
	GTINT 100
	PUSHCONT {
		; expValue
		; end expValue
		PUSHINT 202
		; colValue
		NIP
		; end colValue
	}
	IF
	;; end if
	;; if
	;; push identifier fail
	DUP
	PUSHCONT {
		NEWC
		;; decl: b
		; expValue
		DUP
		; end expValue
		;; get member name
		;; push identifier request
		PUSH S3
		INDEX 0
		STREFR
		; colValue
		NIP
		; end colValue
		;; push identifier b
		DUP
		ENDC
		CTOS
		LDREFRTOS
		SWAP
		; colValue
		DROP
		;; decl: s
		;; if
		;; push identifier s
		DUP
		SBITS
		;; %
		PUSHINT 8
		MOD
		NEQINT 0
		PUSHCONT {
			; expValue
			; end expValue
			PUSHINT 204
			; colValue
			POP S3
			; end colValue
		}
		PUSHCONT {
			;; if
			;; push identifier s
			DUP
			SBITS
			EQINT 0
			PUSHCONT {
				; expValue
				; end expValue
				PUSHINT 204
				; colValue
				POP S3
				; end colValue
			}
			PUSHCONT {
				PUSHINT 0
				;; decl: c
				; while
				FALSE ; decl return flag
				PUSHCONT {
					DUP
					LESSINT 2
					DUP
					PUSHCONT {
						DROP
						;; push identifier s
						PUSH S2
						SBITS
						GTINT 0
					}
					IF
				}
				PUSHCONT {
					; expValue
					PUSH S2
					; end expValue
					LDU 8
					; colValue
					POP S4
					; end colValue
					; expValue
					; end expValue
					; colValue
					POP S2
					; end colValue
					;; if
					;; push identifier c
					PUSH S1
					LESSINT 32
					;; short-circuiting ||
					DUP
					PUSHCONT {
						DROP
						;; push identifier c
						PUSH S1
						EQINT 46
						;; short-circuiting ||
						DUP
						PUSHCONT {
							DROP
							;; push identifier c
							PUSH S1
							EQINT 47
							;; short-circuiting ||
							DUP
							PUSHCONT {
								DROP
								;; push identifier c
								PUSH S1
								EQINT 127
							}
							IFNOT
						}
						IFNOT
					}
					IFNOT
					PUSHCONT {
						; expValue
						; end expValue
						PUSHINT 203
						; colValue
						POP S5
						; end colValue
						;; break
						DROP
						PUSHINT 2
						RET
					}
					IFJMP
					;; end if
				}
				WHILE
				DROP
				; end while
				DROP
			}
			IFELSE
			;; end if
		}
		IFELSE
		;; end if
		DROP2
	}
	IFNOT
	;; end if
	;; if
	;; push identifier fail
	DUP
	PUSHCONT {
		;; map.fetch
		;; get member name
		;; push identifier request
		PUSH S1
		INDEX 0
		HASHCU
		;; push identifier reserved
		GETGLOB 18
		PUSHINT 256
		DICTUGET
		NULLSWAPIFNOT
		PUSHCONT {
			PLDU 32
		}
		IF
		;; decl: resn
		;; if
		;; push identifier resn
		DUP
		ISNULL
		PUSHCONT {
			;; if
			;; push identifier resn
			DUP
			DUP
			ISNULL
			THROWIF 63
			;; >
			;; push identifier now
			NOW
			GREATER
			PUSHCONT {
				; expValue
				; end expValue
				PUSHINT 110
				; colValue
				POP S2
				; end colValue
			}
			IF
			;; end if
		}
		IFNOT
		;; end if
		DROP
	}
	IFNOT
	;; end if
	;; if
	;; push identifier fail
	DUP
	PUSHCONT {
		;; emit regNameRejected
		NEWC
		PUSHSLICE xc0000000000000000000000002_
		STSLICER
		STSLICECONST 0
		STSLICECONST 0
		STSLICECONST x022b77c4
		;; sender
		;; get member sender
		GETGLOB 9
		STSLICER
		;; name
		;; get member name
		;; push identifier request
		PUSH S2
		INDEX 0
		STREFR
		;; duration
		;; get member duration
		;; push identifier request
		PUSH S2
		INDEX 1
		STUR 32
		;; reason
		;; push identifier fail
		PUSH S1
		STUR 8
		ENDC
		PUSHINT 0
		SENDRAWMSG
		NEWC
		;; decl: b1
		; expValue
		DUP
		; end expValue
		;; push identifier callbackFunctionId
		PUSH S4
		STUR 32
		FALSE
		STIR 1
		;; push identifier fail
		PUSH S2
		STUR 8
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		STSLICER
		; colValue
		NIP
		; end colValue
		;; transfer()
		;; get member sender
		GETGLOB 9
		NEWC
		STSLICECONST x42_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 1
		;; push identifier b1
		PUSH S1
		ENDC
		STREFR
		ENDC
		PUSHINT 64
		SENDRAWMSG
		;; return
		BLKDROP 4
		RET
	}
	IFJMP
	;; end if
	;; emit regNameRequest
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x04046bed
	;; sender
	;; get member sender
	GETGLOB 9
	STSLICER
	;; name
	;; get member name
	;; push identifier request
	PUSH S2
	INDEX 0
	STREFR
	;; duration
	;; get member duration
	;; push identifier request
	PUSH S2
	INDEX 1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
	;; push identifier request
	PUSH S1
	;; get member sender
	GETGLOB 9
	;; push identifier callbackFunctionId
	PUSH S4
	TUPLE 3
	;; decl: reqx
	;; push identifier reqx
	DUP
	;; param: rx
	; function RXHash
	NEWC
	;; decl: b
	; expValue
	DUP
	; end expValue
	;; push identifier rx
	PUSH S2
	UNTUPLE 3
	XCHG s2
	BLKSWAP 1, 3
	SWAP
	UNTUPLE 3
	XCHG s2
	BLKSWAP 1, 3
	STREF
	STU 32
	STU 256
	STSLICE
	STU 32
	; colValue
	NIP
	; end colValue
	;; return
	;; push identifier b
	DUP
	ENDC
	HASHCU
	;; %
	PUSHINT 340282366920938463463374607431768211456
	MOD
	;; uint128
	UFITS 128
	NIP
	NIP
	; end function RXHash
	;; decl: rhash
	; expValue
	;; fetch state_rx
	GETGLOB 15
	;; push identifier rhash
	PUSH S1
	SWAP
	; end expValue
	;; push identifier reqx
	PUSH S3
	; colValue
	UNTUPLE 3
	NEWC
	PUSH S3
	UNTUPLE 3
	NEWC
	PUSH S3
	STREFR
	PUSH S2
	STUR 32
	PUSH S1
	STUR 256
	XCHG s3
	BLKDROP 3
	STBREFR
	PUSH S2
	STSLICER
	PUSH S1
	STUR 32
	XCHG s3
	BLKDROP 3
	ROTREV
	PUSHINT 128
	DICTUSETB
	SETGLOB 15
	; end colValue
	;; get member name
	;; push identifier request
	PUSH S3
	INDEX 0
	PUSHINT 2
	MYADDR
	CALL $_resolve_internal$
	;; decl: auct
	;; Remote call IDensAuction.inquiryRequest
	;; push identifier auct
	DUP
	TRUE
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x654ee154
	STSLICECONST x21b371bb
	;; rhash
	;; push identifier rhash
	PUSH S2
	STUR 128
	;; expiry
	PUSHINT 0
	STUR 32
	ENDC
	PUSHINT 64
	SENDRAWMSG
	BLKDROP 6
}
CALLX
; end function regName
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	auctionProcessCallback
.public	auctionProcessCallback
.type	auctionProcessCallback, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode rhash
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode res
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
; Decode expiry
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: rhash
;; param: res
;; param: expiry
; function auctionProcessCallback
PUSHCONT {
	;; index
	;; push identifier rhash
	PUSH S2
	;; push identifier state_rx
	GETGLOB 15
	PUSHINT 128
	DICTUGET
	PUSHCONT {
		LDREFRTOS
		LDREF
		LDU 32
		PLDU 256
		TUPLE 3
		SWAP
		LDMSGADDR
		PLDU 32
		TUPLE 3
	}
	PUSHCONT {
		NEWC
		ENDC
		PUSHINT 0
		PUSHINT 0
		TUPLE 3
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		TUPLE 3
	}
	IFELSE
	;; decl: reqx
	;; get member sender
	GETGLOB 9
	;; get member name
	;; get member r
	;; push identifier reqx
	PUSH S1
	INDEX 0
	INDEX 0
	PUSHINT 2
	MYADDR
	CALL $_resolve_internal$
	SDEQ
	THROWIFNOT 103
	;; if
	;; !
	;; push identifier res
	PUSH S2
	PUSHCONT {
		;; delete
		; expValue
		;; fetch state_rx
		GETGLOB 15
		;; push identifier rhash
		PUSH S4
		SWAP
		; end expValue
		PUSH S1
		SWAP
		PUSHINT 128
		DICTUDEL
		DROP
		; colValue
		NIP
		SETGLOB 15
		; end colValue
		NEWC
		;; decl: b
		; expValue
		DUP
		; end expValue
		;; get member callbackFunctionId
		;; push identifier reqx
		PUSH S2
		INDEX 2
		STUR 32
		;; push identifier res
		PUSH S4
		STIR 1
		PUSHINT 2
		STUR 8
		;; get member sender
		GETGLOB 9
		STSLICER
		; colValue
		NIP
		; end colValue
		;; transfer()
		;; get member sender
		;; push identifier reqx
		PUSH S1
		INDEX 1
		NEWC
		STSLICECONST x42_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 1
		;; push identifier b
		PUSH S1
		ENDC
		STREFR
		ENDC
		PUSHINT 64
		SENDRAWMSG
		;; return
		BLKDROP 5
		RET
	}
	IFNOTJMP
	;; end if
	;; get member sender
	;; push identifier reqx
	DUP
	INDEX 1
	;; get member duration
	;; get member r
	;; push identifier reqx
	PUSH S1
	INDEX 0
	INDEX 1
	;; get member hash
	;; get member r
	;; push identifier reqx
	PUSH S2
	INDEX 0
	INDEX 2
	TUPLE 3
	;; decl: rpr
	;; Remote call IDensAuction.participateProxy
	;; get member sender
	GETGLOB 9
	TRUE
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x4b93a748
	STSLICECONST x5006d0e7
	;; rpr
	;; push identifier rpr
	PUSH S2
	UNTUPLE 3
	BLKSWAP 1, 3
	PUSH S3
	STSLICER
	PUSH S2
	STUR 32
	PUSH S1
	STUR 256
	XCHG s3
	BLKDROP 3
	;; rhash
	;; push identifier rhash
	PUSH S6
	STUR 128
	;; expiry
	;; push identifier expiry
	PUSH S4
	STUR 32
	STBREFR
	ENDC
	PUSHINT 64
	SENDRAWMSG
	BLKDROP 5
}
CALLX
; end function auctionProcessCallback
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	certificateProcessCallback
.public	certificateProcessCallback
.type	certificateProcessCallback, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode rhash
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode expiry
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: rhash
;; param: expiry
; function certificateProcessCallback
PUSHCONT {
	;; index
	;; push identifier rhash
	PUSH S1
	;; push identifier state_rx
	GETGLOB 15
	PUSHINT 128
	DICTUGET
	PUSHCONT {
		LDREFRTOS
		LDREF
		LDU 32
		PLDU 256
		TUPLE 3
		SWAP
		LDMSGADDR
		PLDU 32
		TUPLE 3
	}
	PUSHCONT {
		NEWC
		ENDC
		PUSHINT 0
		PUSHINT 0
		TUPLE 3
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		TUPLE 3
	}
	IFELSE
	;; decl: reqx
	;; get member sender
	GETGLOB 9
	;; get member name
	;; get member r
	;; push identifier reqx
	PUSH S1
	INDEX 0
	INDEX 0
	PUSHINT 1
	MYADDR
	CALL $_resolve_internal$
	SDEQ
	THROWIFNOT 103
	;; if
	;; push identifier now
	NOW
	;; >=
	;; push identifier expiry
	PUSH S2
	GEQ
	;; short-circuiting ||
	DUP
	PUSHCONT {
		DROP
		;; push identifier expiry
		PUSH S1
		;; -
		;; push identifier now
		NOW
		SUB
		UFITS 32
		;; <
		PUSHINT 2419200
		LESS
	}
	IFNOT
	PUSHCONT {
		;; push identifier reqx
		DUP
		;; push identifier rhash
		PUSH S3
		;; push identifier expiry
		PUSH S3
		CALL $initializeAuction_internal$
		;; return
		BLKDROP 3
		RET
	}
	IFJMP
	;; end if
	;; delete
	; expValue
	;; fetch state_rx
	GETGLOB 15
	;; push identifier rhash
	PUSH S3
	SWAP
	; end expValue
	PUSH S1
	SWAP
	PUSHINT 128
	DICTUDEL
	DROP
	; colValue
	NIP
	SETGLOB 15
	; end colValue
	NEWC
	;; decl: b
	; expValue
	DUP
	; end expValue
	;; get member callbackFunctionId
	;; push identifier reqx
	PUSH S2
	INDEX 2
	STUR 32
	FALSE
	STIR 1
	PUSHINT 1
	STUR 8
	;; get member sender
	GETGLOB 9
	STSLICER
	; colValue
	NIP
	; end colValue
	;; transfer()
	;; get member sender
	;; push identifier reqx
	PUSH S1
	INDEX 1
	NEWC
	STSLICECONST x42_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	;; push identifier b
	PUSH S1
	ENDC
	STREFR
	ENDC
	PUSHINT 64
	SENDRAWMSG
	BLKDROP 4
}
CALLX
; end function certificateProcessCallback
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	auctionParticipationCallback
.public	auctionParticipationCallback
.type	auctionParticipationCallback, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode rhash
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode res
LDIQ 1
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
ENDS
;; param: rhash
;; param: res
; function auctionParticipationCallback
;; index
;; push identifier rhash
PUSH S1
;; push identifier state_rx
GETGLOB 15
PUSHINT 128
DICTUGET
PUSHCONT {
	LDREFRTOS
	LDREF
	LDU 32
	PLDU 256
	TUPLE 3
	SWAP
	LDMSGADDR
	PLDU 32
	TUPLE 3
}
PUSHCONT {
	NEWC
	ENDC
	PUSHINT 0
	PUSHINT 0
	TUPLE 3
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	TUPLE 3
}
IFELSE
;; decl: reqx
;; delete
; expValue
;; fetch state_rx
GETGLOB 15
;; push identifier rhash
PUSH S3
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 128
DICTUDEL
DROP
; colValue
NIP
SETGLOB 15
; end colValue
;; get member sender
GETGLOB 9
;; get member name
;; get member r
;; push identifier reqx
PUSH S1
INDEX 0
INDEX 0
PUSHINT 2
MYADDR
CALL $_resolve_internal$
SDEQ
THROWIFNOT 103
NEWC
;; decl: b
; expValue
DUP
; end expValue
;; get member callbackFunctionId
;; push identifier reqx
PUSH S2
INDEX 2
STUR 32
;; push identifier res
PUSH S3
STIR 1
PUSHINT 2
STUR 8
;; get member sender
GETGLOB 9
STSLICER
; colValue
NIP
; end colValue
;; transfer()
;; get member sender
;; push identifier reqx
PUSH S1
INDEX 1
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
;; push identifier b
PUSH S1
ENDC
STREFR
ENDC
PUSHINT 64
SENDRAWMSG
BLKDROP 4
; end function auctionParticipationCallback
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	initializeAuction_internal
.type	initializeAuction_internal, @function
;; param: reqx
;; param: rhash
;; param: expiry
; function initializeAuction
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
PUSHINT 2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; get member name
;; get member r
;; push identifier reqx
PUSH S3
INDEX 0
INDEX 0
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
MYADDR
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 10
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
PUSHINT 1000000000
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x68b55f3f
ENDC
PUSHINT 0
SENDRAWMSG
NIP
;; decl: p
;; Remote call DensPlatform.initialize
;; push identifier p
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x49cb4d34
;; code
;; push identifier auction_code
GETGLOB 12
STREFR
;; owner
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
STSLICER
ENDC
PUSHINT 1
SENDRAWMSG
;; emit auctionDeployed
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x5018e393
;; name
;; get member name
;; get member r
;; push identifier reqx
PUSH S4
INDEX 0
INDEX 0
STREFR
;; duration
;; get member duration
;; get member r
;; push identifier reqx
PUSH S4
INDEX 0
INDEX 1
STUR 32
;; sender
;; get member sender
;; push identifier reqx
PUSH S4
INDEX 1
STSLICER
;; auct
;; push identifier p
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IDensAuction.inquiryRequest
;; push identifier p
DUP
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x654ee154
STSLICECONST x21b371bb
;; rhash
;; push identifier rhash
PUSH S3
STUR 128
;; expiry
;; push identifier expiry
PUSH S2
STUR 32
ENDC
PUSHINT 64
SENDRAWMSG
BLKDROP 4
; end function initializeAuction

.globl	ensureExpiry
.public	ensureExpiry
.type	ensureExpiry, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode expiry
LDU 32
ENDS
;; param: name
;; param: expiry
; function ensureExpiry
;; get member sender
GETGLOB 9
;; push identifier name
PUSH S2
PUSHINT 2
MYADDR
CALL $_resolve_internal$
SDEQ
THROWIFNOT 103
;; push identifier expiry
DUP
;; <=
;; push identifier now
NOW
;; +
PUSHINT 4
;; *
PUSHINT 604800
;; +
PUSHINT 86400
ADD
UFITS 32
MUL
UFITS 32
ADD
UFITS 32
;; +
PUSHINT 86400
ADD
UFITS 32
LEQ
THROWIFNOT 105
;; push identifier name
PUSH S1
PUSHINT 1
MYADDR
CALL $_resolve_internal$
;; decl: cert
;; Remote call IDensCertificate.setExpiry
;; push identifier cert
DUP
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x26b503c1
;; _expiry
;; push identifier expiry
PUSH S2
STUR 32
ENDC
PUSHINT 64
SENDRAWMSG
BLKDROP 3
; end function ensureExpiry
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	auctionFailed
.public	auctionFailed
.type	auctionFailed, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
ENDS
;; param: name
; function auctionFailed
;; get member sender
GETGLOB 9
;; push identifier name
PUSH S1
PUSHINT 2
MYADDR
CALL $_resolve_internal$
SDEQ
THROWIFNOT 103
;; emit auctionFail
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x102fbaa2
;; name
;; push identifier name
PUSH S1
STREFR
;; auct
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IDensAuction.destroy
;; get member sender
GETGLOB 9
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x2585d923
ENDC
PUSHINT 64
SENDRAWMSG
DROP
; end function auctionFailed
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	auctionSucceeded
.public	auctionSucceeded
.type	auctionSucceeded, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode winner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expiry
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: name
;; param: winner
;; param: expiry
; function auctionSucceeded
;; get member sender
GETGLOB 9
;; push identifier name
PUSH S3
PUSHINT 2
MYADDR
CALL $_resolve_internal$
SDEQ
THROWIFNOT 103
;; push identifier name
PUSH S2
PUSHINT 1
MYADDR
CALL $_resolve_internal$
;; decl: cert
;; push identifier name
PUSH S3
;; push identifier winner
PUSH S3
;; push identifier expiry
PUSH S3
TUPLE 3
; expValue
;; fetch temp_lookup
GETGLOB 16
;; push identifier cert
PUSH S2
SWAP
; end expValue
ROT
; colValue
UNTUPLE 3
NEWC
PUSH S3
STREFR
PUSH S2
STSLICER
PUSH S1
STUR 32
XCHG s3
BLKDROP 3
ROTREV
PUSHINT 267
DICTSETB
SETGLOB 16
; end colValue
;; emit auctionSuccess
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0160ca0d
;; name
;; push identifier name
PUSH S4
STREFR
;; winner
;; push identifier winner
PUSH S3
STSLICER
;; expiry
;; push identifier expiry
PUSH S2
STUR 32
;; auct
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IDensCertificate.auctionProcess
;; push identifier cert
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x5a0198ac
STSLICECONST x581bbcb6
;; new_owner
;; push identifier winner
PUSH S3
STSLICER
;; new_expiry
;; push identifier expiry
PUSH S2
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IDensAuction.destroy
;; get member sender
GETGLOB 9
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x2585d923
ENDC
PUSHINT 64
SENDRAWMSG
BLKDROP 4
; end function auctionSucceeded
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	auctionSink
.public	auctionSink
.type	auctionSink, @function
; Decode input parameters
ENDS
; function auctionSink
;; emit receivedAuction
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x01c5132d
;; amount
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
; end function auctionSink
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	certAuctProcessCallback
.public	certAuctProcessCallback
.type	certAuctProcessCallback, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode 
LDI 1
ENDS
;; param: 
; function certAuctProcessCallback
;; delete
; expValue
;; fetch temp_lookup
GETGLOB 16
;; get member sender
GETGLOB 9
SWAP
; end expValue
PUSH S1
SWAP
PUSHINT 267
DICTDEL
DROP
; colValue
NIP
SETGLOB 16
; end colValue
DROP
; end function certAuctProcessCallback
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	certAuctProcessCallbackDummy
.public	certAuctProcessCallbackDummy
.type	certAuctProcessCallbackDummy, @function
; Decode input parameters
; Decode 
LDI 1
ENDS
;; param: 
; function certAuctProcessCallbackDummy
DROP
; end function certAuctProcessCallbackDummy
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	deployCertificate_internal
.type	deployCertificate_internal, @function
;; param: name
;; param: _owner
;; param: expiry
;; param: parent
; function deployCertificate
ACCEPT
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
PUSHINT 1
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier name
PUSH S4
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
;; push identifier parent
PUSH S1
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 10
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
PUSHINT 1000000000
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x68b55f3f
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: p
;; Remote call DensPlatform.initialize
;; push identifier p
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x49cb4d34
;; code
;; push identifier certificate_code
GETGLOB 11
STREFR
;; owner
;; push identifier _owner
PUSH S4
STSLICER
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call IDensCertificate.auctionProcess
;; push identifier p
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x5a0198ac
STSLICECONST x58279a46
;; new_owner
;; push identifier _owner
PUSH S4
STSLICER
;; new_expiry
;; push identifier expiry
PUSH S3
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
;; emit certificateDeployed
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x7647814b
;; name
;; push identifier name
PUSH S6
STREFR
;; owner
;; push identifier _owner
PUSH S5
STSLICER
;; expiry
;; push identifier expiry
PUSH S4
STUR 32
;; parent
;; push identifier parent
PUSH S3
STSLICER
;; cert
;; push identifier p
PUSH S2
STSLICER
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
;; return
XCHG s4
BLKDROP 4
; end function deployCertificate

.globl	directlyDeploy
.public	directlyDeploy
.type	directlyDeploy, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode _owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expiry
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: name
;; param: _owner
;; param: expiry
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 13
EQUAL
THROWIFNOT 100
ACCEPT
; function directlyDeploy
;; return
;; push identifier name
PUSH S2
;; push identifier _owner
PUSH S2
;; push identifier expiry
PUSH S2
MYADDR
CALL $deployCertificate_internal$
;; emitting 1 value(s)
PUSH S4
EQINT -1
PUSHCONT {
	PUSH S6
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x91a2cf87
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
; end function directlyDeploy
BLKDROP 3
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	directlyReconfigure
.public	directlyReconfigure
.type	directlyReconfigure, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode _owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expiry
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: name
;; param: _owner
;; param: expiry
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 13
EQUAL
THROWIFNOT 100
ACCEPT
; function directlyReconfigure
;; push identifier name
PUSH S2
PUSHINT 1
MYADDR
CALL $_resolve_internal$
;; decl: p
;; Remote call IDensCertificate.auctionProcess
;; push identifier p
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x5a0198ac
STSLICECONST x58279a46
;; new_owner
;; push identifier _owner
PUSH S3
STSLICER
;; new_expiry
;; push identifier expiry
PUSH S2
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
;; emit certificateReconfigured
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0c9e0fc3
;; name
;; push identifier name
PUSH S4
STREFR
;; owner
;; push identifier _owner
PUSH S3
STSLICER
;; expiry
;; push identifier expiry
PUSH S2
STUR 32
;; cert
;; push identifier p
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
;; return
;; emitting 1 value(s)
PUSH S4
EQINT -1
PUSHCONT {
	PUSH S6
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xc76de20d
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
; end function directlyReconfigure
BLKDROP 3
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	generateHash
.public	generateHash
.type	generateHash, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode amount
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode nonce
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: amount
;; param: nonce
; function generateHash
NEWC
;; decl: b
; expValue
DUP
; end expValue
;; push identifier amount
PUSH S3
STUR 256
;; push identifier nonce
PUSH S2
STUR 128
; colValue
NIP
; end colValue
;; push identifier b
DUP
ENDC
HASHCU
;; decl: rhash
;; return
XCHG s3
BLKDROP 3
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xce3403b9
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 256
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
; end function generateHash
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	subCertRequest
.public	subCertRequest
.type	subCertRequest, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode subname
LDREF
; Decode _owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expiry
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode _par
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: name
;; param: subname
;; param: _owner
;; param: expiry
;; param: _par
; function subCertRequest
;; get member sender
GETGLOB 9
;; push identifier name
PUSH S5
PUSHINT 1
;; push identifier _par
PUSH S3
CALL $_resolve_internal$
SDEQ
THROWIFNOT 103
;; push identifier subname
PUSH S3
;; push identifier _owner
PUSH S3
;; push identifier expiry
PUSH S3
;; get member sender
GETGLOB 9
CALL $deployCertificate_internal$
;; decl: p
;; transfer()
;; push identifier p
DUP
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 64
SENDRAWMSG
BLKDROP 6
; end function subCertRequest
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	subCertSync
.public	subCertSync
.type	subCertSync, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode subname
LDREF
; Decode _owner
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expiry
LDUQ 32
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode _par
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: name
;; param: subname
;; param: _owner
;; param: expiry
;; param: _par
; function subCertSync
;; get member sender
GETGLOB 9
;; push identifier name
PUSH S5
PUSHINT 1
;; push identifier _par
PUSH S3
CALL $_resolve_internal$
SDEQ
THROWIFNOT 103
;; push identifier subname
PUSH S3
PUSHINT 1
;; get member sender
GETGLOB 9
CALL $_resolve_internal$
;; decl: p
;; Remote call IDensCertificate.auctionProcess
;; push identifier p
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x5a0198ac
STSLICECONST x58279a46
;; new_owner
;; push identifier _owner
PUSH S4
STSLICER
;; new_expiry
;; push identifier expiry
PUSH S3
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 64
SENDRAWMSG
BLKDROP 6
; end function subCertSync
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getOwner
.public	getOwner
.type	getOwner, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getOwner
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier owner
GETGLOB 13
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x924ad0fa
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 256
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
; end function getOwner
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	transferOwner
.public	transferOwner
.type	transferOwner, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode new_owner
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: new_owner
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 13
EQUAL
THROWIFNOT 100
ACCEPT
; function transferOwner
;; emit prepareOwnerTransfer
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x299a7ed7
;; to
;; push identifier new_owner
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; expValue
; end expValue
;; push identifier new_owner
DUP
; colValue
SETGLOB 14
; end colValue
; end function transferOwner
DROP
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	acceptOwner
.public	acceptOwner
.type	acceptOwner, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; function acceptOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier pending_owner
GETGLOB 14
EQUAL
THROWIFNOT 98
ACCEPT
;; emit ownerTransferred
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x1e60d6ed
;; from
;; push identifier owner
GETGLOB 13
STUR 256
;; to
;; push identifier pending_owner
GETGLOB 14
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; expValue
; end expValue
;; push identifier pending_owner
GETGLOB 14
; colValue
SETGLOB 13
; end colValue
; expValue
; end expValue
PUSHINT 0
; colValue
SETGLOB 14
; end colValue
; end function acceptOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getPendingOwner
.public	getPendingOwner
.type	getPendingOwner, @function
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getPendingOwner
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier pending_owner
GETGLOB 14
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x9010c6b6
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 256
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
; end function getPendingOwner
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	withdraw
.public	withdraw
.type	withdraw, @function
; Decode input parameters
; Decode dest
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode value
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: dest
;; param: value
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 13
EQUAL
THROWIFNOT 100
ACCEPT
; function withdraw
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; push identifier value
PUSH S1
SUB
UFITS 128
;; >=
PUSHINT 10000000000
GEQ
THROWIFNOT 100
;; emit withdrawn
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0a8b72b0
;; dest
;; push identifier dest
PUSH S2
STSLICER
;; value
;; push identifier value
PUSH S1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
;; transfer()
;; push identifier value
DUP
;; push identifier dest
PUSH S2
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST 0
STSLICECONST 0
ENDC
PUSHINT 0
SENDRAWMSG
; end function withdraw
DROP2
; end modifier onlyOwner
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 12
GETGLOB 15
GETGLOB 16
REVERSE 4, 0
STREF
STDICT
STDICT
GETGLOB 10
GETGLOB 11
GETGLOB 13
GETGLOB 14
GETGLOB 17
GETGLOB 18
REVERSE 8, 0
STBREF
STREF
STREF
STU 256
STU 256
STU 32
STDICT
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDREF
LDDICT
PLDDICT
SETGLOB 16
SETGLOB 15
SETGLOB 12
LDREF
LDREF
LDU 256
LDU 256
LDU 32
PLDDICT
SETGLOB 18
SETGLOB 17
SETGLOB 14
SETGLOB 13
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDREF
	LDDICT
	PLDDICT
	SETGLOB 16
	SETGLOB 15
	SETGLOB 12
	LDREF
	LDREF
	LDU 256
	LDU 256
	LDU 32
	PLDDICT
	SETGLOB 18
	SETGLOB 17
	SETGLOB 14
	SETGLOB 13
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init platform_code
	NEWC
	ENDC
	SETGLOB 10
	; init certificate_code
	NEWC
	ENDC
	SETGLOB 11
	; init auction_code
	NEWC
	ENDC
	SETGLOB 12
	; init owner
	PUSHINT 0
	SETGLOB 13
	; init pending_owner
	PUSHINT 0
	SETGLOB 14
	; init state_rx
	NEWDICT
	SETGLOB 15
	; init temp_lookup
	NEWDICT
	SETGLOB 16
	; init last_gc
	PUSHINT 0
	SETGLOB 17
	; init reserved
	NEWDICT
	SETGLOB 18
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
	;; init state var: last_gc
	PUSHINT 0
	SETGLOB 17
}
IFELSE

.internal-alias :main_internal,        0
.internal	:main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
PUSHCONT {
	PUSH S1
	LDSLICE 32
	NIP
	PUSHINT 1
	CALL 1
	CALLREF {
		CALL $c4_to_c7$
	}
	;; param: slice
	; function onBounce
	PUSHCONT {
		; expValue
		DUP
		; end expValue
		LDU 32
		; colValue
		POP S2
		; end colValue
		;; decl: functionId
		;; if
		FALSE ; decl return flag
		;; push identifier functionId
		PUSH S1
		;; ==
		PUSHINT 1699668308
		EQUAL
		PUSHCONT {
			NEWC
			;; decl: b
			; expValue
			DUP
			; end expValue
			;; push identifier slice
			PUSH S4
			STSLICER
			; colValue
			NIP
			; end colValue
			;; push identifier b
			DUP
			ENDC
			CTOS
			HEXDUMP
			DROP
			; expValue
			PUSH S3
			; end expValue
			LDU 32
			; Decode input parameters
			; Decode rhash
			LDUQ 128
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 128
			}
			IFNOT
			; Decode expiry
			LDUQ 32
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 32
			}
			IFNOT
			ENDS
			PUSHSLICE x8_
			; colValue
			POP S7
			; end colValue
			ROTREV
			ROTREV
			ROTREV
			;; decl: callbackFunctionId
			;; decl: rhash
			;; if
			;; push identifier callbackFunctionId
			PUSH S2
			;; ==
			PUSHINT 565408187
			EQUAL
			PUSHCONT {
				;; index
				;; push identifier rhash
				PUSH S1
				;; push identifier state_rx
				GETGLOB 15
				PUSHINT 128
				DICTUGET
				PUSHCONT {
					LDREFRTOS
					LDREF
					LDU 32
					PLDU 256
					TUPLE 3
					SWAP
					LDMSGADDR
					PLDU 32
					TUPLE 3
				}
				PUSHCONT {
					NEWC
					ENDC
					PUSHINT 0
					PUSHINT 0
					TUPLE 3
					PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
					PUSHINT 0
					TUPLE 3
				}
				IFELSE
				;; decl: reqx
				;; get member sender
				GETGLOB 9
				;; get member name
				;; get member r
				;; push identifier reqx
				PUSH S1
				INDEX 0
				INDEX 0
				PUSHINT 2
				MYADDR
				CALL $_resolve_internal$
				SDEQ
				THROWIFNOT 103
				;; get member name
				;; get member r
				;; push identifier reqx
				DUP
				INDEX 0
				INDEX 0
				PUSHINT 1
				MYADDR
				CALL $_resolve_internal$
				;; decl: cert
				;; Remote call IDensCertificate.inquiryExpiry
				;; push identifier cert
				DUP
				TRUE
				NEWC
				STSLICECONST x6_
				STI 1
				PUSHINT 3
				STZEROES
				STSLICE
				PUSHINT 109
				STZEROES
				STSLICECONST 0
				STSLICECONST 0
				STSLICECONST x0c07f442
				STSLICECONST x52172ef6
				;; rhash
				;; push identifier rhash
				PUSH S4
				STUR 128
				ENDC
				PUSHINT 64
				SENDRAWMSG
				;; return
				BLKDROP 9
				PUSHINT 4
				RET
			}
			IFJMP
			;; end if
			BLKDROP 4
		}
		IF
		EQINT 4
		IFRET
		;; end if
		;; if
		;; push identifier functionId
		DUP
		;; ==
		PUSHINT 201847874
		EQUAL
		PUSHCONT {
			; expValue
			PUSH S1
			; end expValue
			LDU 32
			; Decode input parameters
			; Decode rhash
			LDUQ 128
			PUSHCONT {
				;; load next cell
				LDREF
				ENDS
				CTOS
				LDU 128
			}
			IFNOT
			ENDS
			PUSHSLICE x8_
			; colValue
			POP S4
			; end colValue
			SWAP
			SWAP
			;; decl: callbackFunctionId
			;; decl: rhash
			;; if
			;; push identifier callbackFunctionId
			PUSH S1
			;; ==
			PUSHINT 1377251062
			EQUAL
			PUSHCONT {
				;; index
				;; push identifier rhash
				DUP
				;; push identifier state_rx
				GETGLOB 15
				PUSHINT 128
				DICTUGET
				PUSHCONT {
					LDREFRTOS
					LDREF
					LDU 32
					PLDU 256
					TUPLE 3
					SWAP
					LDMSGADDR
					PLDU 32
					TUPLE 3
				}
				PUSHCONT {
					NEWC
					ENDC
					PUSHINT 0
					PUSHINT 0
					TUPLE 3
					PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
					PUSHINT 0
					TUPLE 3
				}
				IFELSE
				;; decl: reqx
				;; get member sender
				GETGLOB 9
				;; get member name
				;; get member r
				;; push identifier reqx
				PUSH S1
				INDEX 0
				INDEX 0
				PUSHINT 1
				MYADDR
				CALL $_resolve_internal$
				SDEQ
				THROWIFNOT 103
				;; push identifier reqx
				DUP
				;; push identifier rhash
				PUSH S2
				PUSHINT 0
				CALL $initializeAuction_internal$
				DROP
			}
			IF
			;; end if
			DROP2
		}
		IF
		;; end if
		;; if
		;; push identifier functionId
		DUP
		;; ==
		PUSHINT 1510054060
		EQUAL
		PUSHCONT {
			; expValue
			PUSH S1
			; end expValue
			LDU 32
			; colValue
			POP S3
			; end colValue
			;; decl: callbackFunctionId
			;; if
			;; push identifier callbackFunctionId
			DUP
			;; ==
			PUSHINT 1478212790
			EQUAL
			PUSHCONT {
				;; index
				;; get member sender
				GETGLOB 9
				;; push identifier temp_lookup
				GETGLOB 16
				PUSHINT 267
				DICTGET
				PUSHCONT {
					LDREF
					LDMSGADDR
					PLDU 32
					TUPLE 3
				}
				PUSHCONT {
					NEWC
					ENDC
					PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
					PUSHINT 0
					TUPLE 3
				}
				IFELSE
				;; decl: td
				;; delete
				; expValue
				;; fetch temp_lookup
				GETGLOB 16
				;; get member sender
				GETGLOB 9
				SWAP
				; end expValue
				PUSH S1
				SWAP
				PUSHINT 267
				DICTDEL
				DROP
				; colValue
				NIP
				SETGLOB 16
				; end colValue
				;; get member sender
				GETGLOB 9
				;; get member name
				;; push identifier td
				PUSH S1
				INDEX 0
				PUSHINT 1
				MYADDR
				CALL $_resolve_internal$
				SDEQ
				THROWIFNOT 103
				;; get member name
				;; push identifier td
				DUP
				INDEX 0
				;; get member winner
				;; push identifier td
				PUSH S1
				INDEX 1
				;; get member expiry
				;; push identifier td
				PUSH S2
				INDEX 2
				MYADDR
				CALL $deployCertificate_internal$
				DROP
				DROP
			}
			IF
			;; end if
			DROP
		}
		IF
		;; end if
		DROP2
	}
	CALLX
	; end function onBounce
	CALLREF {
		CALL $c7_to_c4$
	}
}
IFJMP
PUSH S1    ; body
SEMPTY     ; isEmpty
DUP        ; isEmpty isEmpty
PUSHCONT {
	DROP    ;
	PUSH S1 ; body
	LDU 32  ; funcId body'
	PUSH S1 ; funcId body' funcId
	EQINT 0 ; funcId body' isZero
	DUP     ; funcId body' isZero isZero
	PUSHCONT {
 		; funcId body' isZero
		BLKDROP2 2, 1; isZero
	}
	IF
}
IFNOT
; [funcId body'] doReceive
PUSHCONT {
	; function receive
	THROW 100
	; end function receive
}
IFJMP
PUSH S1 ; funcId body' funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	PUSHINT 1
	CALL 1
	CALL $fallback$
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	CALL $fallback$
}
IF

.internal-alias :main_external,        -1
.internal	:main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALL $c4_to_c7_with_init_storage$
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
PUSH S1 ; funcId body funcId
LESSINT 3            ; funcId body' funcId<3
PUSH S2              ; funcId body' funcId<3 funcId
PUSHINT 4294967293   ; funcId body' funcId<3 funcId 4294967293
GREATER              ; funcId body' funcId<3 funcId>4294967293
OR                   ; funcId body' funcId<3||funcId>4294967293
PUSHCONT {
	DROP2
	PUSHINT 1
	CALL 1
	CALL $fallback$
}
IFJMP
SWAP    ; body funcId
CALL 1
GETGLOB 7
ISNULL
PUSHCONT {
	DROP
	CALL $fallback$
}
IF

.globl	platform_code
.public	platform_code
.type	platform_code, @function
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 10
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xe6d44df5
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.globl	certificate_code
.public	certificate_code
.type	certificate_code, @function
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 11
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xc6a4958b
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.globl	auction_code
.public	auction_code
.type	auction_code, @function
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 12
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xa5a919fc
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.globl	owner
.public	owner
.type	owner, @function
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x9178e9bd
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.globl	pending_owner
.public	pending_owner
.type	pending_owner, @function
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 14
NEWC
PUSHSLICE xc0000000000000000000000002_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST xe6ab27e0
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

