.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor DensRoot
GETGLOB 2
THROWIFNOT 101
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
GETGLOB 2
EQUAL
THROWIFNOT 100
ACCEPT
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
; expValue
; end expValue
; colValue
SETGLOB 14
; end colValue
; expValue
; end expValue
PUSHINT 0
; colValue
SETGLOB 21
; end colValue
; end constructor DensRoot
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro receive_macro
; function receive
; end function receive
THROW 192

.macro fallback_macro
; function fallback
; end function fallback
THROW 191

.macro addBalance
DROP
; Decode input parameters
ENDS
; function addBalance
;; emit balanceAdded
PUSHSLICE xc00000000000000000000000002a1cc7aa
NEWC
STSLICE
;; donor
;; get member sender
GETGLOB 9
STSLICER
;; value
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
; end function addBalance
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro installPlatform
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function installPlatform
; expValue
; end expValue
;; push identifier code
DUP
; colValue
SETGLOB 10
; end colValue
;; emit platformCodeUpdated
PUSHSLICE xc000000000000000000000000077e12fd0
NEWC
STSLICE
;; hash
;; push identifier code
PUSH S1
HASHCU
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; end function installPlatform
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro installCertificate
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function installCertificate
; expValue
; end expValue
;; push identifier code
DUP
; colValue
SETGLOB 11
; end colValue
;; emit certificateCodeUpdated
PUSHSLICE xc000000000000000000000000018908882
NEWC
STSLICE
;; hash
;; push identifier code
PUSH S1
HASHCU
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; end function installCertificate
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro installAuction
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function installAuction
; expValue
; end expValue
;; push identifier code
DUP
; colValue
SETGLOB 12
; end colValue
;; emit auctionCodeUpdated
PUSHSLICE xc000000000000000000000000023fb1d93
NEWC
STSLICE
;; hash
;; push identifier code
PUSH S1
HASHCU
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; end function installAuction
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro installBid
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function installBid
; expValue
; end expValue
;; push identifier code
DUP
; colValue
SETGLOB 13
; end colValue
;; emit bidCodeUpdated
PUSHSLICE xc00000000000000000000000002aa76a6d
NEWC
STSLICE
;; hash
;; push identifier code
PUSH S1
HASHCU
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; end function installBid
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setNewAuctionsBan
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode until
LDU 32
ENDS
;; param: until
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function setNewAuctionsBan
; expValue
; end expValue
;; push identifier until
DUP
; colValue
SETGLOB 21
; end colValue
;; emit newAuctionsBanned
PUSHSLICE xc00000000000000000000000003bfa503a
NEWC
STSLICE
;; until
;; push identifier until
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
; end function setNewAuctionsBan
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setSmvRoot
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode smv
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: smv
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function setSmvRoot
; expValue
; end expValue
;; push identifier smv
DUP
; colValue
SETGLOB 22
; end colValue
;; emit smvRootSet
PUSHSLICE xc00000000000000000000000006191ab53
NEWC
STSLICE
;; smv_root
;; push identifier smv
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; end function setSmvRoot
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro onProposalPassed
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode proposalInfo
;; decode struct ProposalInfo proposalInfo
;; decode ProposalInfo.id
LDU 32
;; decode ProposalInfo.start
LDU 32
;; decode ProposalInfo.end
LDU 32
;; decode ProposalInfo.title
LDREF
;; decode ProposalInfo.ts
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
;; decode ProposalInfo.proposalType
LDUQ 8
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
;; decode ProposalInfo.specific
;; decode TvmCell
LDREF
;; build struct ProposalInfo ss:8
BLKSWAP 7, 1
TUPLE 7
SWAP
ENDS
;; param: proposalInfo
; modifier onlySmvRoot
;; get member sender
GETGLOB 9
;; push identifier smv_root
GETGLOB 22
SDEQ
THROWIFNOT 103
ACCEPT
; function onProposalPassed
PUSHCONT {
	;; get member specific
	;; push identifier proposalInfo
	DUP
	INDEX 6
	;; decl: c
	;; if
	;; get member proposalType
	;; push identifier proposalInfo
	PUSH S1
	INDEX 5
	;; ==
	;; get member SetCode
	EQINT 1
	PUSHCONT {
		;; push identifier c
		DUP
		CTOS
		;; decode struct SetCodeProposalSpecific
		;; decode SetCodeProposalSpecific.ContractType
		LDU 8
		;; decode SetCodeProposalSpecific.code
		;; decode TvmCell
		LDREF
		;; build struct SetCodeProposalSpecific
		ROTREV
		TUPLE 2
		SWAP
		; colValue
		DROP
		;; decl: c_setCode
		;; get member code
		;; push identifier c_setCode
		DUP
		INDEX 1
		;; decl: code
		;; get member ContractType
		;; push identifier c_setCode
		PUSH S1
		INDEX 0
		;; decl: ct
		;; if
		;; push identifier ct
		DUP
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier code
			PUSH S1
			; colValue
			SETGLOB 10
			; end colValue
			;; emit platformCodeUpdated
			PUSHSLICE xc000000000000000000000000077e12fd0
			NEWC
			STSLICE
			;; hash
			;; push identifier code
			PUSH S2
			HASHCU
			STUR 256
			ENDC
			PUSHINT 0
			SENDRAWMSG
			;; return
			BLKDROP 4
		}
		IFNOTJMP
		;; end if
		;; if
		;; push identifier ct
		DUP
		EQINT 1
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier code
			PUSH S1
			; colValue
			SETGLOB 11
			; end colValue
			;; emit certificateCodeUpdated
			PUSHSLICE xc000000000000000000000000018908882
			NEWC
			STSLICE
			;; hash
			;; push identifier code
			PUSH S2
			HASHCU
			STUR 256
			ENDC
			PUSHINT 0
			SENDRAWMSG
			;; return
			BLKDROP 4
		}
		IFJMP
		;; end if
		;; if
		;; push identifier ct
		DUP
		EQINT 2
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier code
			PUSH S1
			; colValue
			SETGLOB 12
			; end colValue
			;; emit auctionCodeUpdated
			PUSHSLICE xc000000000000000000000000023fb1d93
			NEWC
			STSLICE
			;; hash
			;; push identifier code
			PUSH S2
			HASHCU
			STUR 256
			ENDC
			PUSHINT 0
			SENDRAWMSG
			;; return
			BLKDROP 4
		}
		IFJMP
		;; end if
		;; if
		;; push identifier ct
		DUP
		;; ==
		PUSHINT 201
		EQUAL
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier code
			PUSH S1
			; colValue
			SETGLOB 13
			; end colValue
			;; emit bidCodeUpdated
			PUSHSLICE xc00000000000000000000000002aa76a6d
			NEWC
			STSLICE
			;; hash
			;; push identifier code
			PUSH S2
			HASHCU
			STUR 256
			ENDC
			PUSHINT 0
			SENDRAWMSG
			;; return
			BLKDROP 4
		}
		IFJMP
		;; end if
		;; if
		;; push identifier ct
		DUP
		;; ==
		PUSHINT 255
		EQUAL
		PUSHCONT {
			;; push identifier code
			PUSH S1
			CALLREF {
				CALL $_upgrade_internal_macro$
			}
			;; return
			BLKDROP 4
		}
		IFJMP
		;; end if
		;; return
		BLKDROP 4
	}
	IFJMP
	;; end if
	;; if
	;; get member proposalType
	;; push identifier proposalInfo
	PUSH S1
	INDEX 5
	;; ==
	;; get member Reserve
	EQINT 2
	PUSHCONT {
		;; push identifier c
		DUP
		CTOS
		;; decode struct ReserveProposalSpecific
		;; decode ReserveProposalSpecific.name
		;; decode string
		LDREF
		;; decode ReserveProposalSpecific.ts
		LDU 32
		;; build struct ReserveProposalSpecific
		ROTREV
		TUPLE 2
		SWAP
		; colValue
		DROP
		;; decl: c_reserve
		;; get member name
		;; push identifier c_reserve
		DUP
		INDEX 0
		;; get member ts
		;; push identifier c_reserve
		PUSH S1
		INDEX 1
		CALLREF {
			CALL $_reserveName_internal_macro$
		}
		;; return
		DROP2
	}
	IFJMP
	;; end if
	;; if
	;; get member proposalType
	;; push identifier proposalInfo
	PUSH S1
	INDEX 5
	;; ==
	;; get member DeployCert
	EQINT 3
	PUSHCONT {
		;; push identifier c
		DUP
		CTOS
		;; decode struct DeployCertProposalSpecific
		;; decode DeployCertProposalSpecific.name
		;; decode string
		LDREF
		;; decode DeployCertProposalSpecific.owner
		;; decode address
		LDMSGADDR
		;; decode DeployCertProposalSpecific.ts
		LDU 128
		;; build struct DeployCertProposalSpecific
		BLKSWAP 3, 1
		TUPLE 3
		SWAP
		; colValue
		DROP
		;; decl: c_depcrt
		;; get member name
		;; push identifier c_depcrt
		DUP
		INDEX 0
		;; get member owner
		;; push identifier c_depcrt
		PUSH S1
		INDEX 1
		;; get member ts
		;; push identifier c_depcrt
		PUSH S2
		INDEX 2
		;; uint32
		UFITS 32
		MYADDR
		CALLREF {
			CALL $deployCertificate_internal_macro$
		}
		;; return
		BLKDROP 3
	}
	IFJMP
	;; end if
	;; if
	;; get member proposalType
	;; push identifier proposalInfo
	PUSH S1
	INDEX 5
	;; ==
	;; get member SetRootOwner
	EQINT 4
	PUSHCONT {
		;; push identifier c
		DUP
		CTOS
		;; decode struct SetRootOwnerProposalSpecific
		;; decode SetRootOwnerProposalSpecific.pubkey
		LDU 256
		;; decode SetRootOwnerProposalSpecific.comment
		;; decode string
		LDREF
		;; build struct SetRootOwnerProposalSpecific
		ROTREV
		TUPLE 2
		SWAP
		; colValue
		DROP
		;; decl: c_setown
		; expValue
		; end expValue
		;; get member pubkey
		;; push identifier c_setown
		DUP
		INDEX 0
		; colValue
		SETGLOB 14
		; end colValue
		; expValue
		; end expValue
		PUSHINT 0
		; colValue
		SETGLOB 15
		; end colValue
		;; emit ownerChanged
		PUSHSLICE xc00000000000000000000000004d2c7c05
		NEWC
		STSLICE
		;; to
		;; push identifier owner
		GETGLOB 14
		STUR 256
		ENDC
		PUSHINT 0
		SENDRAWMSG
		;; return
		DROP2
	}
	IFJMP
	;; end if
	DROP
}
CALLX
; end function onProposalPassed
; end modifier onlySmvRoot
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro upgrade
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function upgrade
;; push identifier code
DUP
CALLREF {
	CALL $_upgrade_internal_macro$
}
; end function upgrade
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	_upgrade_internal
.type	_upgrade_internal, @function
CALL $_upgrade_internal_macro$

.macro _upgrade_internal_macro
;; param: code
; function _upgrade
NEWC
;; decl: b
; expValue
DUP
; end expValue
;; push identifier platform_code
GETGLOB 10
STREFR
;; push identifier certificate_code
GETGLOB 11
STREFR
;; push identifier auction_code
GETGLOB 12
STREFR
;; push identifier owner
GETGLOB 14
STUR 256
;; push identifier pending_owner
GETGLOB 15
STUR 256
; colValue
NIP
; end colValue
;; push identifier code
PUSH S1
CTOS
PLDREF
CTOS
BLESS
POP c3
;; push identifier code
PUSH S1
SETCODE
;; emit rootCodeUpdated
PUSHSLICE xc00000000000000000000000001db34797
NEWC
STSLICE
;; hash
;; push identifier code
PUSH S2
HASHCU
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
;; push identifier b
DUP
ENDC
CALLREF {
	CALL $:onCodeUpgrade$
}
; end function _upgrade
DROP2

.internal-alias :onCodeUpgrade, 2
.internal :onCodeUpgrade
;; param: data
; function onCodeUpgrade
; end function onCodeUpgrade
DROP
CALLREF {
	CALL $c7_to_c4$
}
COMMIT
THROW 0

.macro requestCertificateUpgrade
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; function requestCertificateUpgrade
;; emit certCodeUpgraded
PUSHSLICE xc0000000000000000000000000292707c2
NEWC
STSLICE
;; cert
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IUpgradable.upgrade
;; get member sender
GETGLOB 9
FALSE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x00000000000000000000000000002e461875_
STSLICER
;; code
;; push identifier certificate_code
GETGLOB 11
STREFR
ENDC
PUSHINT 64
SENDRAWMSG
; end function requestCertificateUpgrade
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro reserveName
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode until
LDU 32
ENDS
;; param: name
;; param: until
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function reserveName
;; push identifier name
;; push identifier until
DUP2
CALLREF {
	CALL $_reserveName_internal_macro$
}
; end function reserveName
; end modifier onlyOwner
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	_reserveName_internal
.type	_reserveName_internal, @function
CALL $_reserveName_internal_macro$

.macro _reserveName_internal_macro
;; param: name
;; param: until
; function _reserveName
;; if
;; push identifier until
DUP
EQINT 1
PUSHCONT {
	; expValue
	; end expValue
	; colValue
	DROP
	PUSHINT 4294967295
	; end colValue
}
IF
;; end if
;; emit nameReserved
PUSHSLICE xc00000000000000000000000005349352d
NEWC
STSLICE
;; name
;; push identifier name
PUSH S2
STREFR
;; until
;; push identifier until
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
;; if
;; push identifier until
DUP
;; <
; function Now
;; return
;; push identifier now
NOW
; end function Now
LESS
PUSHCONT {
	;; delete
	; expValue
	;; fetch reserved
	GETGLOB 20
	;; push identifier name
	PUSH S2
	HASHCU
	; end expValue
	; colValue
	SWAP
	PUSHINT 256
	DICTUDEL
	DROP
	SETGLOB 20
	; end colValue
}
PUSHCONT {
	; expValue
	;; fetch reserved
	GETGLOB 20
	;; push identifier name
	PUSH S2
	HASHCU
	SWAP
	; end expValue
	;; push identifier until
	PUSH S2
	; colValue
	NEWC
	STU 32
	ROTREV
	PUSHINT 256
	DICTUSETB
	SETGLOB 20
	; end colValue
}
IFELSE
;; end if
; end function _reserveName
DROP2

.macro getReservedNames
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getReservedNames
PUSHINT 0
NEWDICT
PAIR
;; decl: s
PUSHINT 0
NEWDICT
PAIR
;; decl: e
;; push identifier reserved
GETGLOB 20
DUP
PUSHINT 256
DICTUMIN
PUSHCONT {
	DUP
	ROT
	PLDU 32
}
PUSHCONT {
	NULL
	NULL
	NULL
}
IFELSE
PUSHCONT {
	PUSH S2
	ISNULL
	NOT
}
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier key
	;; array.push(..)
	PUSH2 S1, S5
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETREF
	PAIR
	; colValue
	POP S6
	; end colValue
	; expValue
	; end expValue
	;; push identifier exp
	PUSH2 S4, S0
	;; array.push(..)
	NEWC
	STU 32
	SWAP
	UNPAIR
	PUSH S1
	INC
	XCHG s3
	ROTREV
	PUSHINT 32
	DICTUSETB
	PAIR
	; colValue
	POP S5
	; end colValue
	PUSH2 S2, S3
	PUSHINT 256
	DICTUGETNEXT
	PUSHCONT {
		DUP
		ROT
		PLDU 32
	}
	PUSHCONT {
		NULL
		NULL
		NULL
	}
	IFELSE
	BLKDROP2 3, 3
}
WHILE
BLKDROP 4
; end for
;; return
;; push identifier s
;; push identifier e
DUP2
BLKDROP2 2, 2
; end function getReservedNames
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000002658906d2_
	STSLICER
	PUSH S2
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S1
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	PUSH S1
	UNPAIR
	XCHG s2
	STU 32
	STDICT
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	_resolve_internal
.type	_resolve_internal, @function
CALL $_resolve_internal_macro$

.macro _resolve_internal_macro
;; param: name
;; param: type_id
;; param: parent
; function _resolve
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier type_id
PUSH S2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier name
PUSH S3
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
;; push identifier parent
PUSH S1
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 10
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
NIP
; end function _resolve
BLKDROP2 3, 1

.macro resolve
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
ENDS
;; param: name
; function resolve
;; return
;; push identifier name
DUP
PUSHINT 1
MYADDR
CALLREF {
	CALL $_resolve_internal_macro$
}
; end function resolve
NIP
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003c1cf1b22_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro resolveRPC
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode name
LDREF
; Decode cert
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode ptype
LDUQ 8
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 8
}
IFNOT
ENDS
;; param: name
;; param: cert
;; param: ptype
; function resolveRPC
;; if
;; push identifier cert
PUSH S1
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SDEQ
PUSHCONT {
	MYADDR
	; expValue
	; end expValue
	; colValue
	POP S2
	; end colValue
}
IF
;; end if
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier name
;; push identifier ptype
;; push identifier cert
PUSH3 S2, S0, S1
CALLREF {
	CALL $_resolve_internal_macro$
}
; end function resolveRPC
BLKDROP2 3, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x000000000000000000000000380edf892_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro resolveFull
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode fullname
LDREF
; Decode ptype
LDU 8
ENDS
;; param: fullname
;; param: ptype
; function resolveFull
;; push identifier fullname
;; decl: st
;; push identifier st
PUSH2 S1, S1
PUSHINT 4294967295
CDATASIZE
DROP
NIP
RSHIFT 3
;; decl: l
PUSHINT 0
;; decl: s
MYADDR
;; decl: adr
; for
PUSHINT 0
;; decl: i
PUSHCONT {
	;; push identifier i
	;; <
	;; push identifier l
	PUSH2 S0, S3
	LESS
}
PUSHCONT {
	;; if
	;; push identifier st
	;; push identifier i
	PUSH2 S4, S0
	PUSHINT 1
	CALLREF {
		CALL $__substr_macro$
	}
	HASHCU
	PUSHREF {
		.blob x2f
	}
	HASHCU
	EQUAL
	PUSHCONT {
		;; push identifier st
		;; push identifier s
		;; push identifier i
		PUSH3 S4, S2, S0
		;; -
		;; push identifier s
		PUSH S5
		SUB
		UFITS 256
		CALLREF {
			CALL $__substr_macro$
		}
		;; push identifier ptype
		;; push identifier adr
		PUSH2 S6, S2
		CALLREF {
			CALL $_resolve_internal_macro$
		}
		; expValue
		; end expValue
		; colValue
		POP S2
		; end colValue
		; expValue
		; end expValue
		;; push identifier i
		DUP
		;; +
		INC
		; colValue
		POP S3
		; end colValue
	}
	IF
	;; end if
	;; ++
	; expValue
	; end expValue
	INC
	; colValue
	; end colValue
}
WHILE
DROP
; end for
;; push identifier st
;; push identifier s
PUSH2 S3, S1
;; push identifier l
;; -
;; push identifier s
BLKPUSH 2, 4
SUB
UFITS 256
CALLREF {
	CALL $__substr_macro$
}
;; push identifier ptype
;; push identifier adr
PUSH2 S5, S1
CALLREF {
	CALL $_resolve_internal_macro$
}
; expValue
; end expValue
; colValue
NIP
; end colValue
;; return
;; push identifier adr
DUP
; end function resolveFull
BLKDROP2 6, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000030956f23a_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro resolveSub
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode cert
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: name
;; param: cert
; function resolveSub
;; return
;; push identifier name
PUSH S1
PUSHINT 1
;; push identifier cert
PUSH S2
CALLREF {
	CALL $_resolve_internal_macro$
}
; end function resolveSub
BLKDROP2 2, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003420e20a6_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro auction
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
ENDS
;; param: name
; function auction
;; return
;; push identifier name
DUP
PUSHINT 2
MYADDR
CALLREF {
	CALL $_resolve_internal_macro$
}
; end function auction
NIP
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003b1363882_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro gc
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; modifier onlyOwnerCheck
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
; function gc
; function Now
;; return
;; push identifier now
NOW
; end function Now
;; >
;; push identifier last_gc
GETGLOB 18
;; +
PUSHINT 600
ADD
UFITS 32
GREATER
THROWIFNOT 119
; function Now
;; return
;; push identifier now
NOW
; end function Now
;; >
;; push identifier last_temp
GETGLOB 19
;; +
ADDCONST 60
UFITS 32
GREATER
THROWIFNOT 119
ACCEPT
;; delete
; expValue
; end expValue
NEWDICT
; colValue
SETGLOB 16
; end colValue
;; delete
; expValue
; end expValue
NEWDICT
; colValue
SETGLOB 17
; end colValue
; function Now
;; return
;; push identifier now
NOW
; end function Now
; expValue
; end expValue
; colValue
SETGLOB 18
; end colValue
; function Now
;; return
;; push identifier now
NOW
; end function Now
; expValue
; end expValue
; colValue
SETGLOB 19
; end colValue
;; emit garbage_collected
PUSHSLICE xc000000000000000000000000043e0048f
NEWC
STSLICE
ENDC
PUSHINT 0
SENDRAWMSG
; end function gc
; end modifier onlyOwnerCheck
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro gcNeeded
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function gcNeeded
;; return
;; !
;; map.empty
;; push identifier state_rx
GETGLOB 16
DICTEMPTY
NOT
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; !
	;; map.empty
	;; push identifier temp_lookup
	GETGLOB 17
	DICTEMPTY
	NOT
}
IFNOT
; end function gcNeeded
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000002ea7d178a_
	STSLICER
	PUSH S1
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STIR 1
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro gcPossibleAt
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function gcPossibleAt
;; return
; function Now
;; return
;; push identifier now
NOW
; end function Now
;; push identifier last_gc
GETGLOB 18
;; +
PUSHINT 600
ADD
UFITS 32
;; push identifier last_temp
GETGLOB 19
;; +
ADDCONST 60
UFITS 32
MAX
MAX
; end function gcPossibleAt
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x000000000000000000000000292421e9a_
	STSLICER
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro regName
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode callbackFunctionId
LDU 32
; Decode request
;; decode struct RegRequest request
;; decode RegRequest.name
LDREF
;; decode RegRequest.duration
LDU 32
;; decode RegRequest.hash
LDUQ 256
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
;; build struct RegRequest ss:5
BLKSWAP 3, 1
TUPLE 3
SWAP
ENDS
;; param: callbackFunctionId
;; param: request
; function regName
PUSHCONT {
	;; get member value
	CALLREF {
		CALL $message_balance_macro$
	}
	;; >=
	PUSHINT 5000000000
	GEQ
	THROWIFNOT 102
	PUSHINT 0
	;; decl: fail
	;; if
	;; get member duration
	;; push identifier request
	PUSH S1
	INDEX 1
	LESSINT 1
	PUSHCONT {
		; expValue
		; end expValue
		; colValue
		DROP
		PUSHINT 201
		; end colValue
	}
	IF
	;; end if
	;; if
	;; get member duration
	;; push identifier request
	PUSH S1
	INDEX 1
	GTINT 100
	PUSHCONT {
		; expValue
		; end expValue
		; colValue
		DROP
		PUSHINT 202
		; end colValue
	}
	IF
	;; end if
	;; if
	;; push identifier fail
	DUP
	PUSHCONT {
		NEWC
		;; decl: b
		; expValue
		; end expValue
		;; get member name
		;; push identifier request
		PUSH2 S0, S2
		INDEX 0
		STREFR
		; colValue
		NIP
		; end colValue
		;; push identifier b
		DUP
		ENDC
		CTOS
		LDREFRTOS
		SWAP
		; colValue
		DROP
		;; decl: s
		;; if
		;; push identifier s
		DUP
		SBITS
		;; %
		MODPOW2 3
		NEQINT 0
		PUSHCONT {
			; expValue
			; end expValue
			PUSHINT 204
			; colValue
			POP S3
			; end colValue
		}
		PUSHCONT {
			;; if
			;; push identifier s
			DUP
			SBITS
			EQINT 0
			PUSHCONT {
				; expValue
				; end expValue
				PUSHINT 204
				; colValue
				POP S3
				; end colValue
			}
			PUSHCONT {
				PUSHINT 0
				;; decl: c
				; while
				FALSE ; decl return flag
				PUSHCONT {
					DUP
					LESSINT 2
					DUP
					PUSHCONT {
						DROP
						;; push identifier s
						PUSH S2
						SBITS
						GTINT 0
					}
					IF
				}
				PUSHCONT {
					; expValue
					PUSH S2
					; end expValue
					LDU 8
					; colValue
					POP S4
					; end colValue
					; expValue
					; end expValue
					; colValue
					POP S2
					; end colValue
					;; if
					;; push identifier c
					PUSH S1
					LESSINT 32
					;; short-circuiting ||
					DUP
					PUSHCONT {
						DROP
						;; push identifier c
						PUSH S1
						EQINT 46
						;; short-circuiting ||
						DUP
						PUSHCONT {
							DROP
							;; push identifier c
							PUSH S1
							EQINT 47
							;; short-circuiting ||
							DUP
							PUSHCONT {
								DROP
								;; push identifier c
								PUSH S1
								EQINT 127
							}
							IFNOT
						}
						IFNOT
					}
					IFNOT
					PUSHCONT {
						; expValue
						; end expValue
						; colValue
						; end colValue
						;; break
						DROP
						PUSHINT 203
						POP S4
						PUSHINT 2
					}
					IFJMP
					;; end if
				}
				WHILE
				; end while
				DROP2
			}
			IFELSE
			;; end if
		}
		IFELSE
		;; end if
		DROP2
	}
	IFNOT
	;; end if
	;; if
	;; push identifier fail
	DUP
	PUSHCONT {
		;; map.fetch
		;; get member name
		;; push identifier request
		PUSH S1
		INDEX 0
		HASHCU
		;; push identifier reserved
		GETGLOB 20
		PUSHINT 256
		DICTUGET
		NULLSWAPIFNOT
		PUSHCONT {
			PLDU 32
		}
		IF
		;; decl: resn
		;; if
		;; push identifier resn
		DUP
		ISNULL
		PUSHCONT {
			;; if
			;; push identifier resn
			BLKPUSH 2, 0
			ISNULL
			THROWIF 63
			;; >
			; function Now
			;; return
			;; push identifier now
			NOW
			; end function Now
			GREATER
			PUSHCONT {
				; expValue
				; end expValue
				PUSHINT 110
				; colValue
				POP S2
				; end colValue
			}
			IF
			;; end if
		}
		IFNOT
		;; end if
		DROP
	}
	IFNOT
	;; end if
	;; if
	;; push identifier fail
	DUP
	PUSHCONT {
		;; emit regNameRejected
		PUSHSLICE xc0000000000000000000000000022b77c4
		NEWC
		STSLICE
		;; sender
		;; get member sender
		GETGLOB 9
		STSLICER
		;; name
		;; get member name
		;; push identifier request
		PUSH S2
		INDEX 0
		STREFR
		;; duration
		;; get member duration
		;; push identifier request
		PUSH S2
		INDEX 1
		STUR 32
		;; reason
		;; push identifier fail
		PUSH S1
		STUR 8
		ENDC
		PUSHINT 0
		SENDRAWMSG
		NEWC
		;; decl: b1
		; expValue
		; end expValue
		;; push identifier callbackFunctionId
		PUSH2 S0, S3
		STUR 32
		STZERO
		;; push identifier fail
		PUSH S2
		STUR 8
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		STSLICER
		; colValue
		NIP
		; end colValue
		;; transfer()
		;; get member sender
		GETGLOB 9
		NEWC
		STSLICECONST x42_
		STSLICE
		PUSHINT 1
		STUR 111
		;; push identifier b1
		PUSH S1
		ENDC
		STREFR
		ENDC
		PUSHINT 64
		SENDRAWMSG
		;; return
		DROP2
	}
	IFJMP
	;; end if
	;; emit regNameRequest
	PUSHSLICE xc000000000000000000000000004046bed
	NEWC
	STSLICE
	;; sender
	;; get member sender
	GETGLOB 9
	STSLICER
	;; name
	;; get member name
	;; push identifier request
	PUSH S2
	INDEX 0
	STREFR
	;; duration
	;; get member duration
	;; push identifier request
	PUSH S2
	INDEX 1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
	;; push identifier request
	PUSH S1
	;; get member sender
	GETGLOB 9
	;; push identifier callbackFunctionId
	PUSH S4
	TUPLE 3
	;; decl: reqx
	;; push identifier reqx
	DUP
	;; param: rx
	; function RXHash
	NEWC
	;; decl: b
	; expValue
	; end expValue
	;; push identifier rx
	PUSH2 S0, S1
	UNTUPLE 3
	XCHG s2
	BLKSWAP 1, 3
	SWAP
	UNTUPLE 3
	XCHG s2
	BLKSWAP 1, 3
	STREF
	STU 32
	STU 256
	STSLICE
	STU 32
	; colValue
	NIP
	; end colValue
	;; return
	;; push identifier b
	;; %
	;; uint128
	ENDC
	HASHCU
	PUSHINT 340282366920938463463374607431768211456
	MOD
	UFITS 128
	; end function RXHash
	NIP
	;; decl: rhash
	; expValue
	;; fetch state_rx
	;; push identifier rhash
	DUP
	GETGLOB 16
	; end expValue
	;; push identifier reqx
	PUSH S3
	; colValue
	CALLREF {
		UNTUPLE 3
		XCHG s2
		NEWC
		SWAP
		CALLREF {
			UNTUPLE 3
			XCHG s2
			NEWC
			STREF
			STU 32
			STU 256
		}
		STBREFR
		STSLICE
		STU 32
	}
	ROTREV
	PUSHINT 128
	DICTUSETB
	SETGLOB 16
	; end colValue
	; function Now
	;; return
	;; push identifier now
	NOW
	; end function Now
	; expValue
	; end expValue
	; colValue
	SETGLOB 19
	; end colValue
	;; get member name
	;; push identifier request
	PUSH S3
	INDEX 0
	PUSHINT 2
	MYADDR
	CALLREF {
		CALL $_resolve_internal_macro$
	}
	;; decl: auct
	;; Remote call IDensAuction.inquiryRequest
	;; push identifier auct
	DUP
	TRUE
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	PUSHSLICE x0000000000000000000000000000ca9dc2a84366e377_
	STSLICER
	;; rhash
	;; push identifier rhash
	PUSH S2
	STUR 128
	;; expiry
	PUSHINT 0
	STUR 32
	ENDC
	PUSHINT 64
	SENDRAWMSG
	BLKDROP 4
}
CALLX
; end function regName
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro auctionProcessCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode rhash
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode res
LDIQ 1
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
; Decode expiry
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: rhash
;; param: res
;; param: expiry
; function auctionProcessCallback
PUSHCONT {
	;; index
	;; push identifier rhash
	PUSH S2
	;; push identifier state_rx
	GETGLOB 16
	PUSHINT 128
	DICTUGET
	PUSHREFCONT {
		LDREFRTOS
		LDREF
		LDU 32
		PLDU 256
		TUPLE 3
		SWAP
		LDMSGADDR
		PLDU 32
		TUPLE 3
	}
	PUSHREFCONT {
		PUSHREF {
		}
		PUSHINT 0
		PUSHINT 0
		TUPLE 3
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		TUPLE 3
	}
	IFELSE
	;; decl: reqx
	;; get member sender
	GETGLOB 9
	;; get member name
	;; get member r
	;; push identifier reqx
	PUSH S1
	INDEX2 0, 0
	PUSHINT 2
	MYADDR
	CALLREF {
		CALL $_resolve_internal_macro$
	}
	SDEQ
	THROWIFNOT 103
	;; if
	;; !
	;; push identifier res
	PUSH S2
	PUSHCONT {
		;; delete
		; expValue
		;; fetch state_rx
		;; push identifier rhash
		PUSH S3
		; end expValue
		; colValue
		GETGLOB 16
		PUSHINT 128
		DICTUDEL
		DROP
		SETGLOB 16
		; end colValue
		; function Now
		;; return
		;; push identifier now
		NOW
		; end function Now
		; expValue
		; end expValue
		; colValue
		SETGLOB 19
		; end colValue
		NEWC
		;; decl: b
		; expValue
		; end expValue
		;; get member callbackFunctionId
		;; push identifier reqx
		PUSH2 S0, S1
		INDEX 2
		STUR 32
		;; push identifier res
		PUSH S4
		STIR 1
		PUSHINT 2
		STUR 8
		;; get member sender
		GETGLOB 9
		STSLICER
		; colValue
		NIP
		; end colValue
		;; transfer()
		;; get member sender
		;; push identifier reqx
		PUSH S1
		INDEX 1
		NEWC
		STSLICECONST x42_
		STSLICE
		PUSHINT 1
		STUR 111
		;; push identifier b
		PUSH S1
		ENDC
		STREFR
		ENDC
		PUSHINT 64
		SENDRAWMSG
		;; return
		DROP2
	}
	IFNOTJMP
	;; end if
	;; get member sender
	;; push identifier reqx
	DUP
	INDEX 1
	;; get member duration
	;; get member r
	;; push identifier reqx
	PUSH S1
	INDEX2 0, 1
	;; get member hash
	;; get member r
	;; push identifier reqx
	PUSH S2
	INDEX2 0, 2
	TUPLE 3
	;; decl: rpr
	;; Remote call IDensAuction.participateProxy
	;; get member sender
	GETGLOB 9
	TRUE
	NEWC
	STSLICECONST x6_
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	PUSHINT 1
	STUR 111
	NEWC
	STSLICECONST x4b93a748
	STSLICECONST x5006d0e7
	;; rpr
	;; push identifier rpr
	PUSH S2
	UNTUPLE 3
	BLKSWAP 1, 3
	PUSH S3
	STSLICER
	PUSH S2
	STUR 32
	PUSH S1
	STUR 256
	BLKDROP2 3, 1
	;; rhash
	;; push identifier rhash
	PUSH S6
	STUR 128
	;; expiry
	;; push identifier expiry
	PUSH S4
	STUR 32
	STBREFR
	ENDC
	PUSHINT 64
	SENDRAWMSG
	DROP2
}
CALLX
; end function auctionProcessCallback
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro certificateProcessCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode rhash
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode expiry
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: rhash
;; param: expiry
; function certificateProcessCallback
PUSHCONT {
	;; index
	;; push identifier rhash
	PUSH S1
	;; push identifier state_rx
	GETGLOB 16
	PUSHINT 128
	DICTUGET
	PUSHREFCONT {
		LDREFRTOS
		LDREF
		LDU 32
		PLDU 256
		TUPLE 3
		SWAP
		LDMSGADDR
		PLDU 32
		TUPLE 3
	}
	PUSHREFCONT {
		PUSHREF {
		}
		PUSHINT 0
		PUSHINT 0
		TUPLE 3
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
		PUSHINT 0
		TUPLE 3
	}
	IFELSE
	;; decl: reqx
	;; get member sender
	GETGLOB 9
	;; get member name
	;; get member r
	;; push identifier reqx
	PUSH S1
	INDEX2 0, 0
	PUSHINT 1
	MYADDR
	CALLREF {
		CALL $_resolve_internal_macro$
	}
	SDEQ
	THROWIFNOT 103
	;; if
	;; push identifier expiry
	PUSH S1
	PUSHCONT {
		;; Remote call DensPlatform.destroy
		;; get member sender
		GETGLOB 9
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHSLICE x39896800000000000000000000000000004b0bb247_
		STSLICER
		ENDC
		PUSHINT 0
		SENDRAWMSG
	}
	IFNOT
	;; end if
	;; if
	; function Now
	;; return
	;; push identifier now
	NOW
	; end function Now
	;; >=
	;; push identifier expiry
	PUSH S2
	GEQ
	;; short-circuiting ||
	DUP
	PUSHCONT {
		DROP
		;; push identifier expiry
		PUSH S1
		;; -
		; function Now
		;; return
		;; push identifier now
		NOW
		; end function Now
		SUB
		UFITS 32
		;; <
		PUSHINT 2419200
		LESS
	}
	IFNOT
	PUSHCONT {
		;; if
		; function Now
		;; return
		;; push identifier now
		NOW
		; end function Now
		;; <
		;; push identifier new_auctions_ban
		GETGLOB 21
		LESS
		PUSHCONT {
			NEWC
			;; decl: b
			; expValue
			; end expValue
			;; get member callbackFunctionId
			;; push identifier reqx
			PUSH2 S0, S1
			INDEX 2
			STUR 32
			STZERO
			PUSHINT 0
			;; uint8
			STUR 8
			PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
			STSLICER
			; colValue
			NIP
			; end colValue
			;; transfer()
			;; get member sender
			;; push identifier reqx
			PUSH S1
			INDEX 1
			NEWC
			STSLICECONST x42_
			STSLICE
			PUSHINT 1
			STUR 111
			;; push identifier b
			PUSH S1
			ENDC
			STREFR
			ENDC
			PUSHINT 64
			SENDRAWMSG
			;; return
			DROP2
		}
		IFJMP
		;; end if
		;; push identifier reqx
		DUP
		;; push identifier rhash
		;; push identifier expiry
		OVER2
		CALLREF {
			CALL $initializeAuction_internal_macro$
		}
		;; return
		DROP
	}
	IFJMP
	;; end if
	;; delete
	; expValue
	;; fetch state_rx
	;; push identifier rhash
	PUSH S2
	; end expValue
	; colValue
	GETGLOB 16
	PUSHINT 128
	DICTUDEL
	DROP
	SETGLOB 16
	; end colValue
	; function Now
	;; return
	;; push identifier now
	NOW
	; end function Now
	; expValue
	; end expValue
	; colValue
	SETGLOB 19
	; end colValue
	NEWC
	;; decl: b
	; expValue
	; end expValue
	;; get member callbackFunctionId
	;; push identifier reqx
	PUSH2 S0, S1
	INDEX 2
	STUR 32
	STZERO
	PUSHINT 1
	STUR 8
	;; get member sender
	GETGLOB 9
	STSLICER
	; colValue
	NIP
	; end colValue
	;; transfer()
	;; get member sender
	;; push identifier reqx
	PUSH S1
	INDEX 1
	NEWC
	STSLICECONST x42_
	STSLICE
	PUSHINT 1
	STUR 111
	;; push identifier b
	PUSH S1
	ENDC
	STREFR
	ENDC
	PUSHINT 64
	SENDRAWMSG
	DROP2
}
CALLX
; end function certificateProcessCallback
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro auctionParticipationCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode rhash
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode res
LDIQ 1
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDI 1
}
IFNOT
ENDS
;; param: rhash
;; param: res
; function auctionParticipationCallback
;; index
;; push identifier rhash
PUSH S1
;; push identifier state_rx
GETGLOB 16
PUSHINT 128
DICTUGET
PUSHREFCONT {
	LDREFRTOS
	LDREF
	LDU 32
	PLDU 256
	TUPLE 3
	SWAP
	LDMSGADDR
	PLDU 32
	TUPLE 3
}
PUSHREFCONT {
	PUSHREF {
	}
	PUSHINT 0
	PUSHINT 0
	TUPLE 3
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	PUSHINT 0
	TUPLE 3
}
IFELSE
;; decl: reqx
;; delete
; expValue
;; fetch state_rx
;; push identifier rhash
PUSH S2
; end expValue
; colValue
GETGLOB 16
PUSHINT 128
DICTUDEL
DROP
SETGLOB 16
; end colValue
; function Now
;; return
;; push identifier now
NOW
; end function Now
; expValue
; end expValue
; colValue
SETGLOB 19
; end colValue
;; get member sender
GETGLOB 9
;; get member name
;; get member r
;; push identifier reqx
PUSH S1
INDEX2 0, 0
PUSHINT 2
MYADDR
CALLREF {
	CALL $_resolve_internal_macro$
}
SDEQ
THROWIFNOT 103
NEWC
;; decl: b
; expValue
; end expValue
;; get member callbackFunctionId
;; push identifier reqx
PUSH2 S0, S1
INDEX 2
STUR 32
;; push identifier res
PUSH S3
STIR 1
PUSHINT 2
STUR 8
;; get member sender
GETGLOB 9
STSLICER
; colValue
NIP
; end colValue
;; transfer()
;; get member sender
;; push identifier reqx
PUSH S1
INDEX 1
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 1
STUR 111
;; push identifier b
PUSH S1
ENDC
STREFR
ENDC
PUSHINT 64
SENDRAWMSG
; end function auctionParticipationCallback
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	initializeAuction_internal
.type	initializeAuction_internal, @function
CALL $initializeAuction_internal_macro$

.macro initializeAuction_internal_macro
;; param: reqx
;; param: rhash
;; param: expiry
; function initializeAuction
; function Now
;; return
;; push identifier now
NOW
; end function Now
;; >=
;; push identifier new_auctions_ban
GETGLOB 21
GEQ
THROWIFNOT 118
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
PUSHINT 2
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; get member name
;; get member r
;; push identifier reqx
PUSH S3
INDEX2 0, 0
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
MYADDR
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 10
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
PUSHINT 1000000000
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHSLICE x000000000000000000000000007_
STSLICER
PUSH S2
STREFR
STSLICECONST x345aaf9fc_
ENDC
PUSHINT 0
SENDRAWMSG
NIP
;; decl: p
;; Remote call DensPlatform.initialize
;; push identifier p
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x398968000000000000000000000000000093969a69_
STSLICER
;; code
;; push identifier auction_code
GETGLOB 12
STREFR
;; owner
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
STSLICER
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call IDensAuction.installBidCode
;; push identifier p
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000000e1090d83_
STSLICER
;; code
;; push identifier bid_code
GETGLOB 13
STREFR
ENDC
PUSHINT 1
SENDRAWMSG
;; emit auctionDeployed
PUSHSLICE xc00000000000000000000000005018e393
NEWC
STSLICE
;; name
;; get member name
;; get member r
;; push identifier reqx
PUSH S4
INDEX2 0, 0
STREFR
;; duration
;; get member duration
;; get member r
;; push identifier reqx
PUSH S4
INDEX2 0, 1
STUR 32
;; sender
;; get member sender
;; push identifier reqx
PUSH S4
INDEX 1
STSLICER
;; auct
;; push identifier p
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IDensAuction.inquiryRequest
;; push identifier p
DUP
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x0000000000000000000000000000ca9dc2a84366e377_
STSLICER
;; rhash
;; push identifier rhash
PUSH S3
STUR 128
;; expiry
;; push identifier expiry
PUSH S2
STUR 32
ENDC
PUSHINT 64
SENDRAWMSG
; end function initializeAuction
BLKDROP 4

.macro on_bounce_macro
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
;; param: slice
; function onBounce
PUSHCONT {
	; expValue
	DUP
	; end expValue
	LDU 32
	; colValue
	POP S2
	; end colValue
	;; decl: functionId
	;; if
	FALSE ; decl return flag
	;; push identifier functionId
	PUSH S1
	;; ==
	PUSHINT 1699668308
	EQUAL
	PUSHCONT {
		NEWC
		;; decl: b
		; expValue
		; end expValue
		;; push identifier slice
		PUSH2 S0, S3
		STSLICER
		; colValue
		NIP
		; end colValue
		;; push identifier b
		DUP
		ENDC
		CTOS
		HEXDUMP
		DROP
		; expValue
		PUSH S3
		; end expValue
		LDU 32
		; Decode input parameters
		; Decode rhash
		LDUQ 128
		PUSHREFCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		; Decode expiry
		LDUQ 32
		PUSHREFCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 32
		}
		IFNOT
		ENDS
		PUSHSLICE x8_
		; colValue
		POP S7
		; end colValue
		;; decl: callbackFunctionId
		;; decl: rhash
		;; if
		;; push identifier callbackFunctionId
		PUSH S2
		;; ==
		PUSHINT 565408187
		EQUAL
		PUSHCONT {
			;; index
			;; push identifier rhash
			PUSH S1
			;; push identifier state_rx
			GETGLOB 16
			PUSHINT 128
			DICTUGET
			PUSHREFCONT {
				LDREFRTOS
				LDREF
				LDU 32
				PLDU 256
				TUPLE 3
				SWAP
				LDMSGADDR
				PLDU 32
				TUPLE 3
			}
			PUSHREFCONT {
				PUSHREF {
				}
				PUSHINT 0
				PUSHINT 0
				TUPLE 3
				PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
				PUSHINT 0
				TUPLE 3
			}
			IFELSE
			;; decl: reqx
			;; get member sender
			GETGLOB 9
			;; get member name
			;; get member r
			;; push identifier reqx
			PUSH S1
			INDEX2 0, 0
			PUSHINT 2
			MYADDR
			CALLREF {
				CALL $_resolve_internal_macro$
			}
			SDEQ
			THROWIFNOT 103
			;; get member name
			;; get member r
			;; push identifier reqx
			DUP
			INDEX2 0, 0
			PUSHINT 1
			MYADDR
			CALLREF {
				CALL $_resolve_internal_macro$
			}
			;; decl: cert
			;; Remote call IDensCertificate.inquiryExpiry
			;; push identifier cert
			DUP
			TRUE
			NEWC
			STSLICECONST x6_
			STI 1
			PUSHINT 3
			STZEROES
			STSLICE
			PUSHSLICE x0000000000000000000000000000180fe884a42e5ded_
			STSLICER
			;; rhash
			;; push identifier rhash
			PUSH S4
			STUR 128
			ENDC
			PUSHINT 64
			SENDRAWMSG
			;; return
			BLKDROP 8
			PUSHINT 4
		}
		IFJMP
		;; end if
		BLKDROP 4
	}
	IF
	EQINT 4
	IFRET
	;; end if
	;; if
	FALSE ; decl return flag
	;; push identifier functionId
	PUSH S1
	;; ==
	PUSHINT 201847874
	EQUAL
	PUSHCONT {
		; expValue
		PUSH S2
		; end expValue
		LDU 32
		; Decode input parameters
		; Decode rhash
		LDUQ 128
		PUSHREFCONT {
			;; load next cell
			LDREF
			ENDS
			CTOS
			LDU 128
		}
		IFNOT
		ENDS
		PUSHSLICE x8_
		; colValue
		POP S5
		; end colValue
		;; decl: callbackFunctionId
		;; decl: rhash
		;; if
		FALSE ; decl return flag
		;; push identifier callbackFunctionId
		PUSH S2
		;; ==
		PUSHINT 1377251062
		EQUAL
		PUSHCONT {
			;; index
			;; push identifier rhash
			PUSH S1
			;; push identifier state_rx
			GETGLOB 16
			PUSHINT 128
			DICTUGET
			PUSHREFCONT {
				LDREFRTOS
				LDREF
				LDU 32
				PLDU 256
				TUPLE 3
				SWAP
				LDMSGADDR
				PLDU 32
				TUPLE 3
			}
			PUSHREFCONT {
				PUSHREF {
				}
				PUSHINT 0
				PUSHINT 0
				TUPLE 3
				PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
				PUSHINT 0
				TUPLE 3
			}
			IFELSE
			;; decl: reqx
			;; get member sender
			GETGLOB 9
			;; get member name
			;; get member r
			;; push identifier reqx
			PUSH S1
			INDEX2 0, 0
			PUSHINT 1
			MYADDR
			CALLREF {
				CALL $_resolve_internal_macro$
			}
			SDEQ
			THROWIFNOT 103
			;; if
			; function Now
			;; return
			;; push identifier now
			NOW
			; end function Now
			;; <
			;; push identifier new_auctions_ban
			GETGLOB 21
			LESS
			PUSHCONT {
				NEWC
				;; decl: b
				; expValue
				; end expValue
				;; get member callbackFunctionId
				;; push identifier reqx
				PUSH2 S0, S1
				INDEX 2
				STUR 32
				STZERO
				PUSHINT 0
				;; uint8
				STUR 8
				PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
				STSLICER
				; colValue
				NIP
				; end colValue
				;; transfer()
				;; get member sender
				;; push identifier reqx
				PUSH S1
				INDEX 1
				NEWC
				STSLICECONST x42_
				STSLICE
				PUSHINT 1
				STUR 111
				;; push identifier b
				PUSH S1
				ENDC
				STREFR
				ENDC
				PUSHINT 64
				SENDRAWMSG
				;; return
				BLKDROP 7
				PUSHINT 4
			}
			IFJMP
			;; end if
			;; push identifier reqx
			;; push identifier rhash
			PUSH2 S0, S2
			PUSHINT 0
			CALLREF {
				CALL $initializeAuction_internal_macro$
			}
			DROP
		}
		IF
		DUP
		IFRET
		;; end if
		BLKDROP 3
	}
	IF
	EQINT 4
	IFRET
	;; end if
	;; if
	;; push identifier functionId
	DUP
	;; ==
	PUSHINT 1510054060
	EQUAL
	PUSHCONT {
		; expValue
		PUSH S1
		; end expValue
		LDU 32
		; colValue
		POP S3
		; end colValue
		;; decl: callbackFunctionId
		;; if
		;; push identifier callbackFunctionId
		DUP
		;; ==
		PUSHINT 1478212790
		EQUAL
		PUSHCONT {
			;; index
			;; get member sender
			GETGLOB 9
			;; push identifier temp_lookup
			GETGLOB 17
			PUSHINT 267
			DICTGET
			PUSHREFCONT {
				LDREF
				LDMSGADDR
				PLDU 32
				TUPLE 3
			}
			PUSHREFCONT {
				PUSHREF {
				}
				PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
				PUSHINT 0
				TUPLE 3
			}
			IFELSE
			;; decl: td
			;; delete
			; expValue
			;; fetch temp_lookup
			;; get member sender
			GETGLOB 9
			; end expValue
			; colValue
			GETGLOB 17
			PUSHINT 267
			DICTDEL
			DROP
			SETGLOB 17
			; end colValue
			; function Now
			;; return
			;; push identifier now
			NOW
			; end function Now
			; expValue
			; end expValue
			; colValue
			SETGLOB 19
			; end colValue
			;; get member sender
			GETGLOB 9
			;; get member name
			;; push identifier td
			PUSH S1
			INDEX 0
			PUSHINT 1
			MYADDR
			CALLREF {
				CALL $_resolve_internal_macro$
			}
			SDEQ
			THROWIFNOT 103
			;; get member name
			;; push identifier td
			DUP
			INDEX 0
			;; get member winner
			;; push identifier td
			PUSH S1
			INDEX 1
			;; get member expiry
			;; push identifier td
			PUSH S2
			INDEX 2
			MYADDR
			CALLREF {
				CALL $deployCertificate_internal_macro$
			}
			DROP2
		}
		IF
		;; end if
		DROP
	}
	IF
	;; end if
	DROP
}
CALLX
; end function onBounce
DROP
CALLREF {
	CALL $c7_to_c4$
}

.macro ensureExpiry
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode expiry
LDU 32
ENDS
;; param: name
;; param: expiry
; function ensureExpiry
;; get member sender
GETGLOB 9
;; push identifier name
PUSH S2
PUSHINT 2
MYADDR
CALLREF {
	CALL $_resolve_internal_macro$
}
SDEQ
THROWIFNOT 103
;; push identifier expiry
DUP
;; <=
; function Now
;; return
;; push identifier now
NOW
; end function Now
;; +
PUSHINT 4
;; *
PUSHINT 604800
;; +
PUSHINT 86400
ADD
UFITS 32
MUL
UFITS 32
ADD
UFITS 32
;; +
PUSHINT 172800
ADD
UFITS 32
LEQ
THROWIFNOT 105
;; push identifier name
PUSH S1
PUSHINT 1
MYADDR
CALLREF {
	CALL $_resolve_internal_macro$
}
;; decl: cert
;; Remote call IDensCertificate.setExpiry
;; push identifier cert
DUP
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x00000000000000000000000000004d6a0783_
STSLICER
;; _expiry
;; push identifier expiry
PUSH S2
STUR 32
ENDC
PUSHINT 64
SENDRAWMSG
; end function ensureExpiry
BLKDROP 3
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro auctionFailed
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
ENDS
;; param: name
; function auctionFailed
;; get member sender
GETGLOB 9
;; push identifier name
PUSH S1
PUSHINT 2
MYADDR
CALLREF {
	CALL $_resolve_internal_macro$
}
SDEQ
THROWIFNOT 103
;; emit auctionFail
PUSHSLICE xc0000000000000000000000000102fbaa2
NEWC
STSLICE
;; name
;; push identifier name
PUSH S1
STREFR
;; auct
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IDensAuction.destroy
;; get member sender
GETGLOB 9
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x00000000000000000000000000004b0bb247_
STSLICER
ENDC
PUSHINT 64
SENDRAWMSG
; end function auctionFailed
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro auctionSucceeded
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode winner
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expiry
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: name
;; param: winner
;; param: expiry
; function auctionSucceeded
;; get member sender
GETGLOB 9
;; push identifier name
PUSH S3
PUSHINT 2
MYADDR
CALLREF {
	CALL $_resolve_internal_macro$
}
SDEQ
THROWIFNOT 103
;; push identifier name
PUSH S2
PUSHINT 1
MYADDR
CALLREF {
	CALL $_resolve_internal_macro$
}
;; decl: cert
;; push identifier name
;; push identifier winner
;; push identifier expiry
BLKPUSH 3, 3
TUPLE 3
; expValue
;; fetch temp_lookup
;; push identifier cert
PUSH S1
GETGLOB 17
; end expValue
ROT
; colValue
CALLREF {
	UNTUPLE 3
	XCHG s2
	NEWC
	STREF
	STSLICE
	STU 32
}
ROTREV
PUSHINT 267
DICTSETB
SETGLOB 17
; end colValue
; function Now
;; return
;; push identifier now
NOW
; end function Now
; expValue
; end expValue
; colValue
SETGLOB 19
; end colValue
;; emit auctionSuccess
PUSHSLICE xc00000000000000000000000000160ca0d
NEWC
STSLICE
;; name
;; push identifier name
PUSH S4
STREFR
;; winner
;; push identifier winner
PUSH S3
STSLICER
;; expiry
;; push identifier expiry
PUSH S2
STUR 32
;; auct
;; get member sender
GETGLOB 9
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IDensCertificate.auctionProcess
;; push identifier cert
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x405f5e100000000000000000000000000000b4033158b037796d_
STSLICER
;; new_owner
;; push identifier winner
PUSH S3
STSLICER
;; new_expiry
;; push identifier expiry
PUSH S2
STUR 32
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call IDensAuction.destroy
;; get member sender
GETGLOB 9
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x00000000000000000000000000004b0bb247_
STSLICER
ENDC
PUSHINT 64
SENDRAWMSG
; end function auctionSucceeded
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro auctionSink
DROP
; Decode input parameters
ENDS
; function auctionSink
;; emit receivedAuction
PUSHSLICE xc000000000000000000000000001c5132d
NEWC
STSLICE
;; amount
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
; end function auctionSink
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro certAuctProcessCallback
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode 
LDI 1
ENDS
;; param: 
; function certAuctProcessCallback
;; delete
; expValue
;; fetch temp_lookup
;; get member sender
; end expValue
; colValue
; end colValue
; function Now
;; return
;; push identifier now
; end function Now
; expValue
; end expValue
; colValue
; end colValue
; end function certAuctProcessCallback
DROP
GETGLOB 9
GETGLOB 17
PUSHINT 267
DICTDEL
DROP
SETGLOB 17
NOW
SETGLOB 19
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro certAuctProcessCallbackDummy
DROP
; Decode input parameters
; Decode 
LDI 1
ENDS
;; param: 
; function certAuctProcessCallbackDummy
; end function certAuctProcessCallbackDummy
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	deployCertificate_internal
.type	deployCertificate_internal, @function
CALL $deployCertificate_internal_macro$

.macro deployCertificate_internal_macro
;; param: name
;; param: _owner
;; param: expiry
;; param: parent
; function deployCertificate
ACCEPT
NEWDICT
PUSHINT 0
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
PUSHINT 1
NEWC
STU 8
PUSHINT 2
ROT
PUSHINT 64
DICTUSETB
;; push identifier name
PUSH S4
PUSHINT 3
ROT
PUSHINT 64
DICTUSETREF
;; push identifier parent
PUSH S1
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier platform_code
GETGLOB 10
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
PUSHINT 1000000000
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHSLICE x000000000000000000000000007_
STSLICER
PUSH S2
STREFR
STSLICECONST x345aaf9fc_
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: p
;; Remote call DensPlatform.initialize
;; push identifier p
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x398968000000000000000000000000000093969a69_
STSLICER
;; code
;; push identifier certificate_code
GETGLOB 11
STREFR
;; owner
;; push identifier _owner
PUSH S4
STSLICER
ENDC
PUSHINT 1
SENDRAWMSG
;; Remote call IDensCertificate.auctionProcess
;; push identifier p
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x405f5e100000000000000000000000000000b4033158b04f348d_
STSLICER
;; new_owner
;; push identifier _owner
PUSH S4
STSLICER
;; new_expiry
;; push identifier expiry
PUSH S3
STUR 32
ENDC
PUSHINT 1
SENDRAWMSG
;; emit certificateDeployed
PUSHSLICE xc0000000000000000000000001
NEWC
STSLICE
NEWC
STSLICECONST x7647814b
;; name
;; push identifier name
PUSH S6
STREFR
;; owner
;; push identifier _owner
PUSH S5
STSLICER
;; expiry
;; push identifier expiry
PUSH S4
STUR 32
;; parent
;; push identifier parent
PUSH S3
STSLICER
;; cert
;; push identifier p
PUSH S2
STSLICER
STBREFR
ENDC
PUSHINT 0
SENDRAWMSG
;; return
;; push identifier p
; end function deployCertificate
BLKDROP2 4, 1

.macro directlyDeploy
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode _owner
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expiry
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: name
;; param: _owner
;; param: expiry
;; ret param: retParam@0
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function directlyDeploy
;; return
;; push identifier name
;; push identifier _owner
;; push identifier expiry
BLKPUSH 3, 3
MYADDR
CALLREF {
	CALL $deployCertificate_internal_macro$
}
NIP
; end function directlyDeploy
; end modifier onlyOwner
BLKDROP2 3, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000002468b3e1e_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro directlyReconfigure
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode 
LDREF
; Decode 
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode 
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: 
;; param: 
;; param: 
;; ret param: retParam@0
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function directlyReconfigure
;; return
DROP
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; end function directlyReconfigure
; end modifier onlyOwner
BLKDROP2 3, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000031db78836_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro generateHash
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode bidder
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode amount
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode nonce
LDUQ 256
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: bidder
;; param: amount
;; param: nonce
; function generateHash
NEWC
;; decl: b
; expValue
; end expValue
;; push identifier bidder
PUSH2 S0, S3
STSLICER
;; push identifier amount
PUSH S3
STUR 128
;; push identifier nonce
PUSH S2
STUR 256
; colValue
NIP
; end colValue
;; push identifier b
DUP
ENDC
HASHCU
;; decl: rhash
;; return
;; push identifier rhash
DUP
; end function generateHash
BLKDROP2 5, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x000000000000000000000000250d62c5a_
	STSLICER
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro subCertRequest
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode subname
LDREF
; Decode _owner
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expiry
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode _par
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: name
;; param: subname
;; param: _owner
;; param: expiry
;; param: _par
; function subCertRequest
;; get member sender
GETGLOB 9
;; push identifier name
PUSH S5
PUSHINT 1
;; push identifier _par
PUSH S3
CALLREF {
	CALL $_resolve_internal_macro$
}
SDEQ
THROWIFNOT 103
;; push identifier subname
;; push identifier _owner
;; push identifier expiry
BLKPUSH 3, 3
;; get member sender
GETGLOB 9
CALLREF {
	CALL $deployCertificate_internal_macro$
}
;; decl: p
;; transfer()
;; push identifier p
DUP
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end function subCertRequest
BLKDROP 6
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro subCertSync
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode name
LDREF
; Decode subname
LDREF
; Decode _owner
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expiry
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode _par
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: name
;; param: subname
;; param: _owner
;; param: expiry
;; param: _par
; function subCertSync
;; get member sender
GETGLOB 9
;; push identifier name
PUSH S5
PUSHINT 1
;; push identifier _par
PUSH S3
CALLREF {
	CALL $_resolve_internal_macro$
}
SDEQ
THROWIFNOT 103
;; push identifier subname
PUSH S3
PUSHINT 1
;; get member sender
GETGLOB 9
CALLREF {
	CALL $_resolve_internal_macro$
}
;; decl: p
;; Remote call IDensCertificate.auctionProcess
;; push identifier p
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x405f5e100000000000000000000000000000b4033158b04f348d_
STSLICER
;; new_owner
;; push identifier _owner
PUSH S4
STSLICER
;; new_expiry
;; push identifier expiry
PUSH S3
STUR 32
ENDC
PUSHINT 1
SENDRAWMSG
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end function subCertSync
BLKDROP 6
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getOwner
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier owner
GETGLOB 14
; end function getOwner
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000002492b43ea_
	STSLICER
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 256
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro transferOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode new_owner
LDUQ 256
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: new_owner
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function transferOwner
;; emit prepareOwnerTransfer
PUSHSLICE xc0000000000000000000000000299a7ed7
NEWC
STSLICE
;; to
;; push identifier new_owner
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; expValue
; end expValue
;; push identifier new_owner
; colValue
; end colValue
; end function transferOwner
; end modifier onlyOwner
SETGLOB 15
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro acceptOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; function acceptOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier pending_owner
GETGLOB 15
EQUAL
THROWIFNOT 98
ACCEPT
;; emit ownerTransferred
PUSHSLICE xc00000000000000000000000001e60d6ed
NEWC
STSLICE
;; from
;; push identifier owner
GETGLOB 14
STUR 256
;; to
;; push identifier pending_owner
GETGLOB 15
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
; expValue
; end expValue
;; push identifier pending_owner
GETGLOB 15
; colValue
SETGLOB 14
; end colValue
; expValue
; end expValue
PUSHINT 0
; colValue
SETGLOB 15
; end colValue
; end function acceptOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getPendingOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getPendingOwner
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier pending_owner
GETGLOB 15
; end function getPendingOwner
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x000000000000000000000000240431ada_
	STSLICER
	PUSH S1
	STUR 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 256
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro withdraw
DROP
; Decode input parameters
; Decode dest
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode value
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: dest
;; param: value
; modifier onlyOwner
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
;; push identifier owner
GETGLOB 14
EQUAL
THROWIFNOT 100
ACCEPT
; function withdraw
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; push identifier value
PUSH S1
SUB
UFITS 128
;; >=
PUSHINT 10000000000
GEQ
THROWIFNOT 116
;; emit withdrawn
PUSHSLICE xc00000000000000000000000000a8b72b0
NEWC
STSLICE
;; dest
;; push identifier dest
PUSH S2
STSLICER
;; value
;; push identifier value
PUSH S1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
;; transfer()
;; push identifier value
;; push identifier dest
PUSH2 S0, S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 107
STZEROES
ENDC
PUSHINT 0
SENDRAWMSG
; end function withdraw
; end modifier onlyOwner
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 12
GETGLOB 13
GETGLOB 16
GETGLOB 22
GETGLOB 17
REVERSE 6, 0
STREF
STREF
STDICT
STSLICE
STDICT
GETGLOB 10
GETGLOB 11
GETGLOB 14
GETGLOB 15
GETGLOB 18
GETGLOB 19
GETGLOB 21
GETGLOB 20
REVERSE 10, 0
STBREF
STREF
STREF
STU 256
STU 256
STU 32
STU 32
STU 32
STDICT
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDREF
LDREF
LDDICT
LDMSGADDR
PLDDICT
SETGLOB 17
SETGLOB 22
SETGLOB 16
SETGLOB 13
SETGLOB 12
LDREF
LDREF
LDU 256
LDU 256
LDU 32
LDU 32
LDU 32
PLDDICT
SETGLOB 20
SETGLOB 21
SETGLOB 19
SETGLOB 18
SETGLOB 15
SETGLOB 14
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDREF
	LDREF
	LDDICT
	LDMSGADDR
	PLDDICT
	SETGLOB 17
	SETGLOB 22
	SETGLOB 16
	SETGLOB 13
	SETGLOB 12
	LDREF
	LDREF
	LDU 256
	LDU 256
	LDU 32
	LDU 32
	LDU 32
	PLDDICT
	SETGLOB 20
	SETGLOB 21
	SETGLOB 19
	SETGLOB 18
	SETGLOB 15
	SETGLOB 14
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init platform_code
	PUSHREF {
	}
	SETGLOB 10
	; init certificate_code
	PUSHREF {
	}
	SETGLOB 11
	; init auction_code
	PUSHREF {
	}
	SETGLOB 12
	; init bid_code
	PUSHREF {
	}
	SETGLOB 13
	; init owner
	PUSHINT 0
	SETGLOB 14
	; init pending_owner
	PUSHINT 0
	SETGLOB 15
	; init state_rx
	NEWDICT
	SETGLOB 16
	; init temp_lookup
	NEWDICT
	SETGLOB 17
	; init last_gc
	PUSHINT 0
	SETGLOB 18
	; init last_temp
	PUSHINT 0
	SETGLOB 19
	; init reserved
	NEWDICT
	SETGLOB 20
	; init new_auctions_ban
	PUSHINT 0
	SETGLOB 21
	; init smv_root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 22
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
	;; init state var: last_gc
	PUSHINT 0
	SETGLOB 18
	;; init state var: last_temp
	PUSHINT 0
	SETGLOB 19
	;; init state var: new_auctions_ban
	PUSHINT 0
	SETGLOB 21
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
PUSHCONT {
	PUSH S1
	LDSLICE 32
	NIP
	CALL $on_bounce_macro$
}
IFJMP
PUSH S1    ; body
SEMPTY     ; isEmpty
DUP        ; isEmpty isEmpty
PUSHCONT {
	DROP    ;
	PUSH S1 ; body
	LDUQ 32  ; [funcId] body' ok
	PUSHCONT {
		; body'
		DROP
		CALLREF {
			CALL $fallback_macro$
		}
		THROW 0
	}
	IFNOT
	PUSH S1 ; funcId body' funcId
	EQINT 0 ; funcId body' isZero
	DUP     ; funcId body' isZero isZero
	PUSHCONT {
 		; funcId body' isZero
		BLKDROP2 2, 1; isZero
	}
	IF
}
IFNOT
; [funcId body'] doReceive
IFJMPREF {
	CALL $receive_macro$
}
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.internal-alias :main_external, -1
.internal :main_external
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.macro platform_code
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 10
PUSHSLICE xc0000000000000000000000000e6d44df5
NEWC
STSLICE
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro certificate_code
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 11
PUSHSLICE xc0000000000000000000000000c6a4958b
NEWC
STSLICE
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro auction_code
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 12
PUSHSLICE xc0000000000000000000000000a5a919fc
NEWC
STSLICE
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro bid_code
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
PUSHSLICE xc0000000000000000000000000e10b6481
NEWC
STSLICE
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro owner
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 14
PUSHSLICE xc00000000000000000000000009178e9bd
NEWC
STSLICE
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro pending_owner
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 15
PUSHSLICE xc0000000000000000000000000e6ab27e0
NEWC
STSLICE
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 388172858
LEQ
PUSHCONT {
	DUP
	PUSHINT 166288215
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 141807997
		EQUAL
		IFJMPREF {
			CALL $withdraw$
		}
		DUP
		PUSHINT 166196011
		EQUAL
		IFJMPREF {
			CALL $onProposalPassed$
		}
		DUP
		PUSHINT 166288215
		EQUAL
		IFJMPREF {
			CALL $auctionFailed$
		}
	}
	IFJMP
	DUP
	PUSHINT 293136829
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 269534902
		EQUAL
		IFJMPREF {
			CALL $getPendingOwner$
		}
		DUP
		PUSHINT 282043741
		EQUAL
		IFJMPREF {
			CALL $installPlatform$
		}
		DUP
		PUSHINT 293136829
		EQUAL
		IFJMPREF {
			CALL $owner$
		}
	}
	IFJMP
	DUP
	PUSHINT 328617079
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 295882631
		EQUAL
		IFJMPREF {
			CALL $directlyDeploy$
		}
		DUP
		PUSHINT 306893050
		EQUAL
		IFJMPREF {
			CALL $getOwner$
		}
		DUP
		PUSHINT 328617079
		EQUAL
		IFJMPREF {
			CALL $transferOwner$
		}
	}
	IFJMP
	DUP
	PUSHINT 388172858
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 339053334
		EQUAL
		IFJMPREF {
			CALL $generateHash$
		}
		DUP
		PUSHINT 343830048
		EQUAL
		IFJMPREF {
			CALL $installCertificate$
		}
		DUP
		PUSHINT 388172858
		EQUAL
		IFJMPREF {
			CALL $upgrade$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1155271999
LEQ
PUSHCONT {
	DUP
	PUSHINT 613451686
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 425869748
		EQUAL
		IFJMPREF {
			CALL $getReservedNames$
		}
		DUP
		PUSHINT 565408187
		EQUAL
		IFJMPREF {
			CALL $auctionProcessCallback$
		}
		DUP
		PUSHINT 613451686
		EQUAL
		IFJMPREF {
			CALL $gcPossibleAt$
		}
	}
	IFJMP
	DUP
	PUSHINT 814376568
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 631839228
		EQUAL
		IFJMPREF {
			CALL $auction_code$
		}
		DUP
		PUSHINT 725642401
		EQUAL
		IFJMPREF {
			CALL $setNewAuctionsBan$
		}
		DUP
		PUSHINT 814376568
		EQUAL
		IFJMPREF {
			CALL $regName$
		}
	}
	IFJMP
	DUP
	PUSHINT 864421225
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 824733373
		EQUAL
		IFJMPREF {
			CALL $subCertRequest$
		}
		DUP
		PUSHINT 832830675
		EQUAL
		IFJMPREF {
			CALL $addBalance$
		}
		DUP
		PUSHINT 864421225
		EQUAL
		IFJMPREF {
			CALL $installBid$
		}
	}
	IFJMP
	DUP
	PUSHINT 1155271999
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 983516642
		EQUAL
		IFJMPREF {
			CALL $gcNeeded$
		}
		DUP
		PUSHINT 1112915086
		EQUAL
		IFJMPREF {
			CALL $resolveFull$
		}
		DUP
		PUSHINT 1155271999
		EQUAL
		IFJMPREF {
			CALL $ensureExpiry$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1614511652
LEQ
PUSHCONT {
	DUP
	PUSHINT 1219438366
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1185191307
		EQUAL
		IFJMPREF {
			CALL $certificate_code$
		}
		DUP
		PUSHINT 1198383629
		EQUAL
		IFJMPREF {
			CALL $directlyReconfigure$
		}
		DUP
		PUSHINT 1219438366
		EQUAL
		IFJMPREF {
			CALL $reserveName$
		}
	}
	IFJMP
	DUP
	PUSHINT 1342623975
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1249020557
		EQUAL
		IFJMPREF {
			CALL $requestCertificateUpgrade$
		}
		DUP
		PUSHINT 1315065614
		EQUAL
		IFJMPREF {
			CALL $setSmvRoot$
		}
		DUP
		PUSHINT 1342623975
		EQUAL
		IFJMPREF {
			CALL $auctionParticipationCallback$
		}
	}
	IFJMP
	DUP
	PUSHINT 1478212790
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1350797353
		EQUAL
		IFJMPREF {
			CALL $resolveSub$
		}
		DUP
		PUSHINT 1377251062
		EQUAL
		IFJMPREF {
			CALL $certificateProcessCallback$
		}
		DUP
		PUSHINT 1478212790
		EQUAL
		IFJMPREF {
			CALL $certAuctProcessCallback$
		}
	}
	IFJMP
	DUP
	PUSHINT 1614511652
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1478990406
		EQUAL
		IFJMPREF {
			CALL $certAuctProcessCallbackDummy$
		}
		DUP
		PUSHINT 1596529814
		EQUAL
		IFJMPREF {
			CALL $auctionSucceeded$
		}
		DUP
		PUSHINT 1614511652
		EQUAL
		IFJMPREF {
			CALL $resolveRPC$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 2135484735
LEQ
PUSHCONT {
	DUP
	PUSHINT 1636715328
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1615843465
		EQUAL
		IFJMPREF {
			CALL $gc$
		}
		DUP
		PUSHINT 1628136577
		EQUAL
		IFJMPREF {
			CALL $bid_code$
		}
		DUP
		PUSHINT 1636715328
		EQUAL
		IFJMPREF {
			CALL $auctionSink$
		}
	}
	IFJMP
	DUP
	PUSHINT 1756716863
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1722492896
		EQUAL
		IFJMPREF {
			CALL $pending_owner$
		}
		DUP
		PUSHINT 1725189621
		EQUAL
		IFJMPREF {
			CALL $platform_code$
		}
		DUP
		PUSHINT 1756716863
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
	}
	IFJMP
	DUP
	PUSHINT 1886635720
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1809145905
		EQUAL
		IFJMPREF {
			CALL $acceptOwner$
		}
		DUP
		PUSHINT 1817021984
		EQUAL
		IFJMPREF {
			CALL $auction$
		}
		DUP
		PUSHINT 1886635720
		EQUAL
		IFJMPREF {
			CALL $resolve$
		}
	}
	IFJMP
	DUP
	PUSHINT 2135484735
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1896505361
		EQUAL
		IFJMPREF {
			CALL $installAuction$
		}
		DUP
		PUSHINT 2135484735
		EQUAL
		IFJMPREF {
			CALL $subCertSync$
		}
	}
	IFJMP
}
IFJMP
