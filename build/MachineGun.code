.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode root
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode owner
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode expiry
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode base
DUP
SBITREFS
EQINT 1
SWAP
EQINT 0
AND
PUSHCONT {
	LDREF
	ENDS
	CTOS
}
IF
LDREF
; Decode lim
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode chs
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: root
;; param: owner
;; param: expiry
;; param: base
;; param: lim
;; param: chs
; constructor MachineGun
GETGLOB 2
THROWIFNOT 101
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
;; ==
GETGLOB 2
EQUAL
THROWIFNOT 102
ACCEPT
; expValue
; end expValue
;; push identifier root
PUSH S5
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
;; push identifier owner
PUSH S4
; colValue
SETGLOB 11
; end colValue
; expValue
; end expValue
;; push identifier expiry
PUSH S3
; colValue
SETGLOB 12
; end colValue
; expValue
; end expValue
;; push identifier base
PUSH S2
; colValue
SETGLOB 13
; end colValue
; expValue
; end expValue
;; push identifier lim
; colValue
; end colValue
; expValue
; end expValue
;; push identifier chs
; colValue
; end colValue
; end constructor MachineGun
SWAP
SETGLOB 15
SETGLOB 16
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro tratata
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
CALLREF {
	CALL $tratata_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	tratata_internal
.type	tratata_internal, @function
CALL $tratata_internal_macro$

.macro tratata_internal_macro
; function tratata
;; get member sender
GETGLOB 9
MYADDR
SDEQ
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	GETGLOB 5
	DUP
	ISNULL
	PUSHCONT {
		DROP
		PUSHINT 0
	}
	IF
	;; ==
	GETGLOB 2
	EQUAL
}
IFNOT
THROWIFNOT 102
ACCEPT
;; push identifier i
GETGLOB 14
;; decl: j
; expValue
; end expValue
;; push identifier i
GETGLOB 14
;; +
;; push identifier _chs
GETGLOB 16
ADD
UFITS 32
; colValue
SETGLOB 14
; end colValue
PUSHINT 0
BLKPUSH 2, 0
PUSHREF {
}
PUSHINT 0
PUSHINT 0
PUSHREF {
}
TUPLE 7
;; decl: pi
PUSHREF {
}
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
PUSHINT 0
TUPLE 3
;; decl: sp
PUSHINT 0
; expValue
; end expValue
PUSH2 S2, S0
; colValue
SETINDEX 4
POP S3
; end colValue
; expValue
; end expValue
PUSH2 S2, S0
; colValue
SETINDEX 2
POP S3
; end colValue
; expValue
; end expValue
PUSH2 S2, S0
; colValue
SETINDEX 1
POP S3
; end colValue
; expValue
PUSH S2
; end expValue
SWAP
; colValue
SETINDEX 0
POP S2
; end colValue
; expValue
PUSH S1
; end expValue
PUSHREF {
	.blob x
}
; colValue
SETINDEX 3
POP S2
; end colValue
; expValue
PUSH S1
; end expValue
;; get member DeployCert
PUSHINT 3
; colValue
SETINDEX 5
POP S2
; end colValue
; expValue
; end expValue
;; push identifier _owner
; colValue
GETGLOB 11
SETINDEX 1
; end colValue
; expValue
; end expValue
;; push identifier now
;; +
; colValue
NOW
PUSHINT 31536000
ADD
UFITS 32
SETINDEX 2
; end colValue
; while
PUSHCONT {
	;; push identifier j
	PUSH S2
	;; <
	;; push identifier i
	GETGLOB 14
	LESS
}
PUSHCONT {
	NEWC
	NULL
	TUPLE 2
	NEWC
	;; push identifier _base
	GETGLOB 13
	CTOS
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	CALLREF {
		CALL $appendToList_macro$
	}
	;; push identifier j
	PUSH S4
	PUSHINT 0
	FALSE
	FALSE
	CALLREF {
		CALL $convertIntToDecStr_macro$
	}
	CALLREF {
		CALL $appendToList_macro$
	}
	CALLREF {
		CALL $assembleList_macro$
	}
	; expValue
	; end expValue
	; colValue
	SETINDEX 0
	; end colValue
	NEWC
	;; decl: b
	; expValue
	; end expValue
	;; push identifier sp
	PUSH2 S0, S1
	UNTUPLE 3
	XCHG s2
	BLKSWAP 1, 3
	STREF
	STSLICE
	STU 128
	; colValue
	NIP
	; end colValue
	;; push identifier b
	; expValue
	; end expValue
	; colValue
	; end colValue
	; expValue
	; end expValue
	; colValue
	; end colValue
	ENDC
	PUSH S2
	SWAP
	SETINDEX 6
	POP S2
	PUSH S2
	INC
	UFITS 32
	POP S3
}
WHILE
; end while
;; if
;; push identifier i
GETGLOB 14
;; <
;; push identifier _lim
GETGLOB 15
LESS
PUSHCONT {
	;; Remote call MachineGun.tratata
	MYADDR
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHSLICE x39896800000000000000000000000000003809dbf5_
	STSLICER
	ENDC
	PUSHINT 2
	SENDRAWMSG
}
IF
;; end if
BLKDROP 3
; end function tratata

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 16
NEWC
STU 32
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
GETGLOB 14
GETGLOB 15
REVERSE 8, 0
STBREF
STSLICE
STSLICE
STU 32
STREF
STU 32
STU 32
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
PLDU 32
SETGLOB 16
LDMSGADDR
LDMSGADDR
LDU 32
LDREF
LDU 32
PLDU 32
SETGLOB 15
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	PLDU 32
	SETGLOB 16
	LDMSGADDR
	LDMSGADDR
	LDU 32
	LDREF
	LDU 32
	PLDU 32
	SETGLOB 15
	SETGLOB 14
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init _root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	; init _owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 11
	; init _expiry
	PUSHINT 0
	SETGLOB 12
	; init _base
	PUSHREF {
	}
	SETGLOB 13
	; init i
	PUSHINT 0
	SETGLOB 14
	; init _lim
	PUSHINT 0
	SETGLOB 15
	; init _chs
	PUSHINT 0
	SETGLOB 16
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDUQ 32  ; [funcId] body' ok
THROWIFNOT 60 ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro _root
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 10
PUSHSLICE xc000000000000000000000000089c06b8e
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _owner
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 11
PUSHSLICE xc00000000000000000000000008fd860ac
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _expiry
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 12
PUSHSLICE xc0000000000000000000000000c8118fb9
NEWC
STSLICE
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _base
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
PUSHSLICE xc0000000000000000000000000b20bae25
NEWC
STSLICE
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro i
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 14
PUSHSLICE xc0000000000000000000000000fb21a5a0
NEWC
STSLICE
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _lim
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 15
PUSHSLICE xc00000000000000000000000009b92f1e7
NEWC
STSLICE
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro _chs
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 16
PUSHSLICE xc0000000000000000000000000efeeaf54
NEWC
STSLICE
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 462615015
LEQ
PUSHCONT {
	DUP
	PUSHINT 163605390
	EQUAL
	IFJMPREF {
		CALL $_root$
	}
	DUP
	PUSHINT 265838764
	EQUAL
	IFJMPREF {
		CALL $_owner$
	}
	DUP
	PUSHINT 462615015
	EQUAL
	IFJMPREF {
		CALL $_lim$
	}
}
IFJMP
DUP
PUSHINT 1209110457
LEQ
PUSHCONT {
	DUP
	PUSHINT 470085114
	EQUAL
	IFJMPREF {
		CALL $tratata$
	}
	DUP
	PUSHINT 839626277
	EQUAL
	IFJMPREF {
		CALL $_base$
	}
	DUP
	PUSHINT 1209110457
	EQUAL
	IFJMPREF {
		CALL $_expiry$
	}
}
IFJMP
DUP
PUSHINT 2065802656
LEQ
PUSHCONT {
	DUP
	PUSHINT 1391026668
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
	DUP
	PUSHINT 1877913428
	EQUAL
	IFJMPREF {
		CALL $_chs$
	}
	DUP
	PUSHINT 2065802656
	EQUAL
	IFJMPREF {
		CALL $i$
	}
}
IFJMP
