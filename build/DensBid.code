.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode hash_val
LDUQ 256
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode end_bid
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
; Decode end_rev
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: hash_val
;; param: end_bid
;; param: end_rev
; constructor DensBid
;; get member sender
GETGLOB 9
;; push identifier auction
GETGLOB 10
SDEQ
THROWIFNOT 113
; expValue
; end expValue
;; push identifier hash_val
PUSH S2
; colValue
SETGLOB 13
; end colValue
; expValue
; end expValue
;; push identifier end_bid
; colValue
; end colValue
; expValue
; end expValue
;; push identifier end_rev
; colValue
; end colValue
; expValue
; end expValue
; colValue
; end colValue
; end constructor DensBid
SWAP
SETGLOB 14
SETGLOB 15
DROP
FALSE
SETGLOB 16
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro receive_macro
; function receive
; end function receive
THROW 192

.macro fallback_macro
; function fallback
; end function fallback
THROW 191

.macro addBalance
DROP
; Decode input parameters
ENDS
; function addBalance
; end function addBalance
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro put
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode new_box
LDREF
ENDS
;; param: new_box
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; function put
; expValue
; end expValue
;; push identifier new_box
DUP
; colValue
SETGLOB 17
; end colValue
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end function put
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro bid
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode hash_val
LDUQ 256
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: hash_val
;; ret param: retParam@0
PUSHINT 0
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; function bid
PUSHCONT {
	;; if
	; function Now
	;; return
	;; push identifier now
	NOW
	; end function Now
	;; >=
	;; push identifier endBid
	GETGLOB 14
	GEQ
	PUSHCONT {
		;; return
		GETGLOB 4
		PUSHINT 0
		SETINDEXQ 2
		TRUE
		SETINDEXQ 1
		PUSHINT 64
		SETINDEXQ 4
		SETGLOB 4
		DROP
		FALSE
	}
	IFJMP
	;; end if
	; expValue
	; end expValue
	;; push identifier hash_val
	PUSH S1
	; colValue
	SETGLOB 13
	; end colValue
	;; return
	GETGLOB 4
	PUSHINT 0
	SETINDEXQ 2
	TRUE
	SETINDEXQ 1
	PUSHINT 64
	SETINDEXQ 4
	SETGLOB 4
	DROP
	TRUE
}
CALLX
; end function bid
; end modifier onlyOwner
NIP
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000036770257e_
	STSLICER
	PUSH S1
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STIR 1
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro reveal
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode amount
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode nonce
LDUQ 256
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
ENDS
;; param: amount
;; param: nonce
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; function reveal
; function Now
;; return
;; push identifier now
NOW
; end function Now
;; >=
;; push identifier endBid
GETGLOB 14
GEQ
THROWIFNOT 117
; function Now
;; return
;; push identifier now
NOW
; end function Now
;; <
;; push identifier endRev
GETGLOB 15
LESS
THROWIFNOT 117
;; !
;; push identifier revealed
GETGLOB 16
THROWIF 108
NEWC
;; decl: b
; expValue
DUP
; end expValue
;; push identifier owner
GETGLOB 12
STSLICER
;; push identifier amount
PUSH S3
STUR 128
;; push identifier nonce
PUSH S2
STUR 256
; colValue
NIP
; end colValue
;; push identifier b
DUP
ENDC
HASHCU
;; decl: rhash
;; push identifier rhash
DUP
;; ==
;; push identifier hash
GETGLOB 13
EQUAL
THROWIFNOT 107
;; push identifier amount
PUSH S3
;; >=
PUSHINT 1000000000
GEQ
THROWIFNOT 114
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
;; >=
;; push identifier amount
PUSH S4
;; +
PUSHINT 1000000000
ADD
UFITS 128
GEQ
THROWIFNOT 102
;; Remote call IDensAuction.revealInt
;; push identifier auction
GETGLOB 10
TRUE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHSLICE x0000000000000000000000000000feed218b_
STSLICER
;; owner
;; push identifier owner
GETGLOB 12
STSLICER
;; amount
;; push identifier amount
PUSH S4
STUR 128
ENDC
PUSHINT 64
SENDRAWMSG
; end function reveal
; end modifier onlyOwner
BLKDROP 4
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro withdraw
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; function withdraw
; function Now
;; return
;; push identifier now
NOW
; end function Now
;; >=
;; push identifier endRev
GETGLOB 15
GEQ
THROWIFNOT 117
;; transfer()
;; push identifier owner
GETGLOB 12
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 160
SENDRAWMSG
; end function withdraw
; end modifier onlyOwner
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
GETGLOB 13
NEWC
STU 256
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 14
GETGLOB 15
GETGLOB 16
GETGLOB 17
REVERSE 9, 0
STBREF
STSLICE
STU 32
STSLICE
STU 32
STU 32
STI 1
STREF
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
PLDU 256
SETGLOB 13
LDMSGADDR
LDU 32
LDMSGADDR
LDU 32
LDU 32
LDI 1
PLDREF
SETGLOB 17
SETGLOB 16
SETGLOB 15
SETGLOB 14
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	PLDU 256
	SETGLOB 13
	LDMSGADDR
	LDU 32
	LDMSGADDR
	LDU 32
	LDU 32
	LDI 1
	PLDREF
	SETGLOB 17
	SETGLOB 16
	SETGLOB 15
	SETGLOB 14
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init auction
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 10
	; init start
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 32
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 11
	; init owner
	PUSHINT 3
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 12
	; init hash
	PUSHINT 0
	SETGLOB 13
	; init endBid
	PUSHINT 0
	SETGLOB 14
	; init endRev
	PUSHINT 0
	SETGLOB 15
	; init revealed
	PUSHINT 0
	SETGLOB 16
	; init box
	PUSHREF {
	}
	SETGLOB 17
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
DUP        ; isEmpty isEmpty
PUSHCONT {
	DROP    ;
	PUSH S1 ; body
	LDUQ 32  ; [funcId] body' ok
	PUSHCONT {
		; body'
		DROP
		CALLREF {
			CALL $fallback_macro$
		}
		THROW 0
	}
	IFNOT
	PUSH S1 ; funcId body' funcId
	EQINT 0 ; funcId body' isZero
	DUP     ; funcId body' isZero isZero
	PUSHCONT {
 		; funcId body' isZero
		BLKDROP2 2, 1; isZero
	}
	IF
}
IFNOT
; [funcId body'] doReceive
IFJMPREF {
	CALL $receive_macro$
}
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.internal-alias :main_external, -1
.internal :main_external
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.macro auction
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 10
PUSHSLICE xc0000000000000000000000000b63f955e
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro start
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 11
PUSHSLICE xc0000000000000000000000000bffcbec1
NEWC
STSLICE
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro owner
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 12
PUSHSLICE xc0000000000000000000000000df0bcfde
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro hash
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
PUSHSLICE xc00000000000000000000000009313ab26
NEWC
STSLICE
PUSH S1
STUR 256
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro endBid
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 14
PUSHSLICE xc0000000000000000000000000b1c3973f
NEWC
STSLICE
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro endRev
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 15
PUSHSLICE xc0000000000000000000000000c71ccf4f
NEWC
STSLICE
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro revealed
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 16
PUSHSLICE xc0000000000000000000000000d2c2753f
NEWC
STSLICE
PUSH S1
STIR 1
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro box
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 17
PUSHSLICE xc000000000000000000000000083caa22e
NEWC
STSLICE
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 800354827
LEQ
PUSHCONT {
	DUP
	PUSHINT 63611438
	EQUAL
	IFJMPREF {
		CALL $box$
	}
	DUP
	PUSHINT 165767377
	EQUAL
	IFJMPREF {
		CALL $constructor$
	}
	DUP
	PUSHINT 320056102
	EQUAL
	IFJMPREF {
		CALL $hash$
	}
	DUP
	PUSHINT 800354827
	EQUAL
	IFJMPREF {
		CALL $withdraw$
	}
}
IFJMP
DUP
PUSHINT 1073528513
LEQ
PUSHCONT {
	DUP
	PUSHINT 832830675
	EQUAL
	IFJMPREF {
		CALL $addBalance$
	}
	DUP
	PUSHINT 834901823
	EQUAL
	IFJMPREF {
		CALL $endBid$
	}
	DUP
	PUSHINT 910136670
	EQUAL
	IFJMPREF {
		CALL $auction$
	}
	DUP
	PUSHINT 1073528513
	EQUAL
	IFJMPREF {
		CALL $start$
	}
}
IFJMP
DUP
PUSHINT 1539753599
LEQ
PUSHCONT {
	DUP
	PUSHINT 1193070415
	EQUAL
	IFJMPREF {
		CALL $endRev$
	}
	DUP
	PUSHINT 1388475711
	EQUAL
	IFJMPREF {
		CALL $revealed$
	}
	DUP
	PUSHINT 1507592543
	EQUAL
	IFJMPREF {
		CALL $bid$
	}
	DUP
	PUSHINT 1539753599
	EQUAL
	IFJMPREF {
		CALL $reveal$
	}
}
IFJMP
DUP
PUSHINT 1857895492
LEQ
PUSHCONT {
	DUP
	PUSHINT 1594609630
	EQUAL
	IFJMPREF {
		CALL $owner$
	}
	DUP
	PUSHINT 1857895492
	EQUAL
	IFJMPREF {
		CALL $put$
	}
}
IFJMP
