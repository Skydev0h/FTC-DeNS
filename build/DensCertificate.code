.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
ENDS
; constructor DensCertificate
; end constructor DensCertificate
THROW 199

.macro receive_macro
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; function receive
;; if
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 192
;; end if
;; emit balanceAdded
PUSHSLICE xc00000000000000000000000002a1cc7aa
NEWC
STSLICE
;; donor
;; get member sender
GETGLOB 9
STSLICER
;; value
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
; end function receive
IFREF {
	CALL $c7_to_c4$
}

.macro fallback_macro
; function fallback
; end function fallback
THROW 191

.macro addBalance
DROP
; Decode input parameters
ENDS
; function addBalance
;; emit balanceAdded
PUSHSLICE xc00000000000000000000000002a1cc7aa
NEWC
STSLICE
;; donor
;; get member sender
GETGLOB 9
STSLICER
;; value
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
; end function addBalance
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro upgrade
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode code
;; decode TvmCell
LDREF
ENDS
;; param: code
; modifier onlyRoot
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 99
; function upgrade
ACCEPT
NEWC
;; decl: b
; expValue
DUP
; end expValue
;; push identifier root
GETGLOB 10
STSLICER
;; push identifier name
GETGLOB 11
STREFR
;; push identifier owner
GETGLOB 12
STSLICER
;; push identifier parent
GETGLOB 13
STSLICER
;; push identifier value
GETGLOB 14
STSLICER
;; push identifier registered
GETGLOB 16
STUR 32
;; push identifier expiry
GETGLOB 17
STUR 32
; colValue
NIP
; end colValue
;; push identifier code
PUSH S1
CTOS
PLDREF
CTOS
BLESS
POP c3
;; push identifier code
PUSH S1
SETCODE
;; push identifier b
DUP
ENDC
CALLREF {
	CALL $:onCodeUpgrade$
}
; end function upgrade
; end modifier onlyRoot
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.internal-alias :onCodeUpgrade, 2
.internal :onCodeUpgrade
;; param: data
; function onCodeUpgrade
;; set default state vars
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 10
PUSHREF {
}
SETGLOB 11
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 12
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 13
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 14
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 15
PUSHINT 0
SETGLOB 16
PUSHINT 0
SETGLOB 17
NEWDICT
SETGLOB 18
;; end set default state vars
;; push identifier data
DUP
CTOS
;; decl: s
; expValue
DUP
; end expValue
;; decode address
LDMSGADDR
;; decode string
LDREF
;; decode address
LDMSGADDR
;; decode address
LDMSGADDR
; colValue
POP S5
; end colValue
REVERSE 4, 0
; expValue
; end expValue
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 11
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 12
; end colValue
; expValue
; end expValue
; colValue
SETGLOB 13
; end colValue
;; push identifier s
DUP
SBITS
GTINT 0
PUSHCONT {
	; expValue
	DUP
	; end expValue
	;; decode address
	LDMSGADDR
	; colValue
	POP S2
	; end colValue
}
PUSHCONT {
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
}
IFELSE
; expValue
; end expValue
; colValue
SETGLOB 14
; end colValue
;; push identifier s
DUP
SBITS
GTINT 0
PUSHCONT {
	; expValue
	DUP
	; end expValue
	LDU 32
	; colValue
	POP S2
	; end colValue
}
PUSHCONT {
	; function Now
	;; return
	;; push identifier now
	NOW
	; end function Now
	;; uint32
}
IFELSE
; expValue
; end expValue
; colValue
SETGLOB 16
; end colValue
;; push identifier s
DUP
SBITS
GTINT 0
PUSHCONT {
	; expValue
	DUP
	; end expValue
	LDU 32
	; colValue
	POP S2
	; end colValue
}
PUSHCONT {
	PUSHINT 0
	;; uint32
}
IFELSE
; expValue
; end expValue
; colValue
SETGLOB 17
; end colValue
;; emit deployed
PUSHSLICE xc00000000000000000000000000b7c21fd
NEWC
STSLICE
;; root
;; push identifier root
GETGLOB 10
STSLICER
;; name
;; push identifier name
GETGLOB 11
STREFR
;; owner
;; push identifier owner
GETGLOB 12
STSLICER
;; expiry
;; push identifier expiry
GETGLOB 17
STUR 32
;; upgraded
;; push identifier value
GETGLOB 14
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SDEQ
NOT
STIR 1
ENDC
PUSHINT 0
SENDRAWMSG
; end function onCodeUpgrade
DROP2
CALLREF {
	CALL $c7_to_c4$
}
COMMIT
THROW 0

.macro requestUpgrade
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; modifier retRem
; function requestUpgrade
;; Remote call IDensRoot.requestCertificateUpgrade
;; push identifier root
GETGLOB 10
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x000000000000000000000000000094e5151b_
STSLICER
ENDC
PUSHINT 64
SENDRAWMSG
;; emit upgradeRequested
PUSHSLICE xc00000000000000000000000005fe8601b
NEWC
STSLICE
ENDC
PUSHINT 0
SENDRAWMSG
; end function requestUpgrade
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end modifier retRem
; end modifier onlyOwner
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro subCertRequest
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode subname
LDREF
; Decode subexpiry
LDU 32
ENDS
;; param: subname
;; param: subexpiry
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; function subCertRequest
;; if
;; push identifier subexpiry
DUP
;; >
;; push identifier expiry
GETGLOB 17
GREATER
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier expiry
	; colValue
	DROP
	GETGLOB 17
	; end colValue
}
IF
;; end if
;; emit subCertRequested
PUSHSLICE xc00000000000000000000000007a8986e0
NEWC
STSLICE
;; subname
;; push identifier subname
PUSH S2
STREFR
;; subexpiry
;; push identifier subexpiry
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IDensRoot.subCertRequest
;; push identifier root
GETGLOB 10
FALSE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHINT 1
STUR 111
NEWC
STSLICECONST x31286ebd
;; name
;; push identifier name
GETGLOB 11
STREFR
;; subname
;; push identifier subname
PUSH S3
STREFR
;; _owner
;; push identifier owner
GETGLOB 12
STSLICER
;; expiry
;; push identifier expiry
GETGLOB 17
;; push identifier subexpiry
PUSH S3
MAX
STUR 32
;; _par
;; push identifier parent
GETGLOB 13
STSLICER
STBREFR
ENDC
PUSHINT 64
SENDRAWMSG
; end function subCertRequest
; end modifier onlyOwner
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro subCertSynchronize
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode subname
LDREF
; Decode subexpiry
LDU 32
ENDS
;; param: subname
;; param: subexpiry
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; function subCertSynchronize
;; if
;; push identifier subexpiry
DUP
;; >
;; push identifier expiry
GETGLOB 17
GREATER
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier expiry
	; colValue
	DROP
	GETGLOB 17
	; end colValue
}
IF
;; end if
;; emit subCertSynchronized
PUSHSLICE xc000000000000000000000000036356817
NEWC
STSLICE
;; subname
;; push identifier subname
PUSH S2
STREFR
;; subexpiry
;; push identifier subexpiry
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
;; Remote call IDensRoot.subCertSync
;; push identifier root
GETGLOB 10
FALSE
NEWC
STSLICECONST x6_
STI 1
PUSHINT 3
STZEROES
STSLICE
PUSHINT 1
STUR 111
NEWC
STSLICECONST x7f48e93f
;; name
;; push identifier name
GETGLOB 11
STREFR
;; subname
;; push identifier subname
PUSH S3
STREFR
;; _owner
;; push identifier owner
GETGLOB 12
STSLICER
;; expiry
;; push identifier expiry
GETGLOB 17
;; push identifier subexpiry
PUSH S3
MAX
STUR 32
;; _par
;; push identifier parent
GETGLOB 13
STSLICER
STBREFR
ENDC
PUSHINT 64
SENDRAWMSG
; end function subCertSynchronize
; end modifier onlyOwner
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getOwner
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier owner
GETGLOB 12
; end function getOwner
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000038b0e5872_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode new_owner
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: new_owner
; modifier onlyRoot
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 99
; modifier retRem
; function setOwner
; expValue
; end expValue
;; push identifier new_owner
DUP
; colValue
SETGLOB 12
; end colValue
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; expValue
; end expValue
; colValue
SETGLOB 14
; end colValue
;; delete
; expValue
; end expValue
NEWDICT
; colValue
SETGLOB 18
; end colValue
;; emit ownerForceChanged
PUSHSLICE xc0000000000000000000000000616d049e
NEWC
STSLICE
;; new_owner
;; push identifier new_owner
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; end function setOwner
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end modifier retRem
; end modifier onlyRoot
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getPendingOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getPendingOwner
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier pending_owner
GETGLOB 15
; end function getPendingOwner
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000002a5a5ed8a_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro transferOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode new_owner
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: new_owner
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; modifier retRem
; function transferOwner
;; emit prepareOwnerTransfer
PUSHSLICE xc0000000000000000000000000355023d0
NEWC
STSLICE
;; to
;; push identifier new_owner
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; expValue
; end expValue
;; push identifier new_owner
DUP
; colValue
SETGLOB 15
; end colValue
; end function transferOwner
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end modifier retRem
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro acceptOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
ENDS
; modifier retRem
; function acceptOwner
;; get member sender
GETGLOB 9
;; push identifier pending_owner
GETGLOB 15
SDEQ
THROWIFNOT 98
;; emit ownerTransferred
PUSHSLICE xc000000000000000000000000062179810
NEWC
STSLICE
;; from
;; push identifier owner
GETGLOB 12
STSLICER
;; to
;; push identifier pending_owner
GETGLOB 15
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; expValue
; end expValue
;; push identifier pending_owner
GETGLOB 15
; colValue
SETGLOB 12
; end colValue
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; expValue
; end expValue
; colValue
SETGLOB 15
; end colValue
; end function acceptOwner
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end modifier retRem
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro withdraw
DROP
; Decode input parameters
; Decode dest
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode _value
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: dest
;; param: _value
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; function withdraw
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; push identifier _value
PUSH S1
SUB
UFITS 128
;; >=
PUSHINT 1000000000
GEQ
THROWIFNOT 116
;; emit withdrawn
PUSHSLICE xc00000000000000000000000000a8b72b0
NEWC
STSLICE
;; dest
;; push identifier dest
PUSH S2
STSLICER
;; value
;; push identifier _value
PUSH S1
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
;; transfer()
;; push identifier _value
;; push identifier dest
PUSH2 S0, S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 107
STZEROES
ENDC
PUSHINT 0
SENDRAWMSG
; end function withdraw
; end modifier onlyOwner
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getValue
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getValue
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier value
GETGLOB 14
; end function getValue
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003a3d8cc6a_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setValue
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode new_value
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: new_value
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; modifier retRem
; function setValue
; expValue
; end expValue
;; push identifier new_value
DUP
; colValue
SETGLOB 14
; end colValue
;; emit modified
PUSHSLICE xc0000000000000000000000000740216c0
NEWC
STSLICE
;; value
;; push identifier new_value
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
;; emit modified_ex
PUSHSLICE xc000000000000000000000000078b0a871
NEWC
STSLICE
;; rec_type
PUSHINT 0
STIR 16
;; value
;; push identifier new_value
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
; end function setValue
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end modifier retRem
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getTarget
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode rec_type
LDI 16
ENDS
;; param: rec_type
;; ret param: retParam@0
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getTarget
PUSHCONT {
	;; if
	;; push identifier rec_type
	PUSH S1
	PUSHCONT {
		;; return
		;; push identifier value
		DROP
		GETGLOB 14
	}
	IFNOTJMP
	;; end if
	;; return
	;; index
	;; push identifier rec_type
	PUSH S1
	;; push identifier values
	GETGLOB 18
	PUSHINT 16
	DICTIGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	NIP
}
CALLX
; end function getTarget
NIP
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003cf7b8f2e_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setTarget
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode rec_type
LDI 16
; Decode new_value
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: rec_type
;; param: new_value
; modifier onlyOwner
;; get member sender
GETGLOB 9
;; push identifier owner
GETGLOB 12
SDEQ
THROWIFNOT 100
; modifier retRem
; function setTarget
PUSHCONT {
	;; if
	;; push identifier rec_type
	PUSH S1
	PUSHCONT {
		; expValue
		; end expValue
		;; push identifier new_value
		DUP
		; colValue
		SETGLOB 14
		; end colValue
		;; emit modified
		PUSHSLICE xc0000000000000000000000000740216c0
		NEWC
		STSLICE
		;; value
		;; push identifier new_value
		PUSH S1
		STSLICER
		ENDC
		PUSHINT 0
		SENDRAWMSG
		;; emit modified_ex
		PUSHSLICE xc000000000000000000000000078b0a871
		NEWC
		STSLICE
		;; rec_type
		PUSHINT 0
		STIR 16
		;; value
		;; push identifier new_value
		PUSH S1
		STSLICER
		ENDC
		PUSHINT 0
		SENDRAWMSG
		;; return
	}
	IFNOTJMP
	;; end if
	; expValue
	;; fetch values
	;; push identifier rec_type
	PUSH S1
	GETGLOB 18
	; end expValue
	;; push identifier new_value
	PUSH S2
	; colValue
	ROTREV
	PUSHINT 16
	DICTISET
	SETGLOB 18
	; end colValue
	;; emit modified_ex
	PUSHSLICE xc000000000000000000000000078b0a871
	NEWC
	STSLICE
	;; rec_type
	;; push identifier rec_type
	PUSH S2
	STIR 16
	;; value
	;; push identifier new_value
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
CALLX
; end function setTarget
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end modifier retRem
; end modifier onlyOwner
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getExpiry
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getExpiry
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier expiry
GETGLOB 17
; end function getExpiry
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000037010545e_
	STSLICER
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setExpiry
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode _expiry
LDU 32
ENDS
;; param: _expiry
; modifier onlyRoot
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 99
; modifier retRem
; function setExpiry
; expValue
; end expValue
;; push identifier _expiry
DUP
; colValue
SETGLOB 17
; end colValue
;; emit expiryChanged
PUSHSLICE xc00000000000000000000000002e795415
NEWC
STSLICE
;; new_expiry
;; push identifier expiry
GETGLOB 17
STUR 32
;; prolong
STZERO
ENDC
PUSHINT 0
SENDRAWMSG
; end function setExpiry
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end modifier retRem
; end modifier onlyRoot
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro prolong
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode length
LDU 32
ENDS
;; param: length
; modifier onlyRoot
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 99
; modifier retRem
; function prolong
;; if
;; push identifier expiry
GETGLOB 17
PUSHCONT {
	; function Now
	;; return
	;; push identifier now
	NOW
	; end function Now
	; expValue
	; end expValue
	; colValue
	SETGLOB 17
	; end colValue
}
IFNOT
;; end if
;; push identifier length
; expValue
;; fetch expiry
; end expValue
GETGLOB 17
PUSH S1
ADD
UFITS 32
; colValue
SETGLOB 17
; end colValue
;; emit expiryChanged
PUSHSLICE xc00000000000000000000000002e795415
NEWC
STSLICE
;; new_expiry
;; push identifier expiry
GETGLOB 17
STUR 32
;; prolong
STONE
ENDC
PUSHINT 0
SENDRAWMSG
; end function prolong
;; transfer()
;; get member sender
GETGLOB 9
NEWC
STSLICECONST x42_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 64
SENDRAWMSG
; end modifier retRem
; end modifier onlyRoot
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getRegistered
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getRegistered
;; return
;; push identifier registered
GETGLOB 16
; end function getRegistered
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000002eed4b89a_
	STSLICER
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro inquiryExpiry
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode rhash
LDUQ 128
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: rhash
; function inquiryExpiry
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier rhash
DUP
;; push identifier expiry
GETGLOB 17
; end function inquiryExpiry
BLKDROP2 1, 2
;; emitting 2 value(s)
PUSH S2
EQINT -1
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000002301fd10a_
	STSLICER
	PUSH S2
	STUR 128
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	STUR 128
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP2
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getParent
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getParent
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier parent
GETGLOB 13
; end function getParent
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000020d8d16d2_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getRoot
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getRoot
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier root
GETGLOB 10
; end function getRoot
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003d106887a_
	STSLICER
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getName
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getName
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier name
GETGLOB 11
; end function getName
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x00000000000000000000000030abfa0c2_
	STSLICER
	PUSH S1
	STREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro whois
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function whois
;; return
;; push identifier name
GETGLOB 11
;; push identifier owner
GETGLOB 12
;; push identifier parent
GETGLOB 13
;; push identifier value
GETGLOB 14
;; push identifier registered
GETGLOB 16
;; push identifier expiry
GETGLOB 17
TUPLE 6
; end function whois
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 1
	STUR 98
	NEWC
	STSLICECONST x82979294
	PUSH S2
	UNTUPLE 6
	BLKSWAP 1, 6
	PUSH S6
	STREFR
	PUSH S5
	STSLICER
	PUSH S4
	STSLICER
	PUSH S3
	STSLICER
	PUSH S2
	STUR 32
	PUSH S1
	STUR 32
	BLKDROP2 6, 1
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 1
	STUR 106
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	UNTUPLE 6
	BLKSWAP 1, 6
	PUSH S6
	STREFR
	PUSH S5
	STSLICER
	PUSH S4
	STSLICER
	PUSH S3
	STSLICER
	PUSH S2
	STUR 32
	PUSH S1
	STUR 32
	BLKDROP2 6, 1
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro auctionProcess
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode new_owner
LDMSGADDRQ
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode new_expiry
LDUQ 32
PUSHREFCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 32
}
IFNOT
ENDS
;; param: new_owner
;; param: new_expiry
;; ret param: retParam@0
PUSHINT 0
; modifier onlyRoot
;; get member sender
GETGLOB 9
;; push identifier root
GETGLOB 10
SDEQ
THROWIFNOT 99
; function auctionProcess
ACCEPT
;; if
;; push identifier owner
GETGLOB 12
;; push identifier new_owner
PUSH S3
SDEQ
PUSHCONT {
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	; expValue
	; end expValue
	; colValue
	SETGLOB 14
	; end colValue
	;; delete
	; expValue
	; end expValue
	NEWDICT
	; colValue
	SETGLOB 18
	; end colValue
	; expValue
	; end expValue
	;; push identifier new_owner
	PUSH S2
	; colValue
	SETGLOB 12
	; end colValue
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	; expValue
	; end expValue
	; colValue
	SETGLOB 15
	; end colValue
}
IFNOT
;; end if
; expValue
; end expValue
;; push identifier new_expiry
PUSH S1
; colValue
SETGLOB 17
; end colValue
;; emit auctionSet
PUSHSLICE xc0000000000000000000000000714b7011
NEWC
STSLICE
;; owner
;; push identifier new_owner
PUSH S3
STSLICER
;; expiry
;; push identifier new_expiry
PUSH S2
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
TRUE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
DROP
TRUE
; end function auctionProcess
; end modifier onlyRoot
BLKDROP2 2, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHSLICE x0000000000000000000000003680662b2_
	STSLICER
	PUSH S1
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 106
	STZEROES
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STIR 1
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 13
GETGLOB 14
GETGLOB 15
REVERSE 4, 0
STSLICE
STSLICE
STSLICE
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 16
GETGLOB 17
GETGLOB 18
REVERSE 8, 0
STBREF
STSLICE
STREF
STSLICE
STU 32
STU 32
STDICT
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDMSGADDR
LDMSGADDR
SETGLOB 15
SETGLOB 14
SETGLOB 13
LDMSGADDR
LDREF
LDMSGADDR
LDU 32
LDU 32
PLDDICT
SETGLOB 18
SETGLOB 17
SETGLOB 16
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDMSGADDR
	LDMSGADDR
	SETGLOB 15
	SETGLOB 14
	SETGLOB 13
	LDMSGADDR
	LDREF
	LDMSGADDR
	LDU 32
	LDU 32
	PLDDICT
	SETGLOB 18
	SETGLOB 17
	SETGLOB 16
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init root
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	; init name
	PUSHREF {
	}
	SETGLOB 11
	; init owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 12
	; init parent
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 13
	; init value
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 14
	; init pending_owner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 15
	; init registered
	PUSHINT 0
	SETGLOB 16
	; init expiry
	PUSHINT 0
	SETGLOB 17
	; init values
	NEWDICT
	SETGLOB 18
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
DUP        ; isEmpty isEmpty
PUSHCONT {
	DROP    ;
	PUSH S1 ; body
	LDUQ 32  ; [funcId] body' ok
	PUSHCONT {
		; body'
		DROP
		CALLREF {
			CALL $fallback_macro$
		}
		THROW 0
	}
	IFNOT
	PUSH S1 ; funcId body' funcId
	EQINT 0 ; funcId body' isZero
	DUP     ; funcId body' isZero isZero
	PUSHCONT {
 		; funcId body' isZero
		BLKDROP2 2, 1; isZero
	}
	IF
}
IFNOT
; [funcId body'] doReceive
IFJMPREF {
	CALL $receive_macro$
}
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.internal-alias :main_external, -1
.internal :main_external
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.macro root
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 10
PUSHSLICE xc0000000000000000000000000b7295e20
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro name
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 11
PUSHSLICE xc0000000000000000000000000f985b3f4
NEWC
STSLICE
PUSH S1
STREFR
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro owner
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 12
PUSHSLICE xc0000000000000000000000000df0bcfde
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro parent
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 13
PUSHSLICE xc00000000000000000000000008d8f2ca0
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro value
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 14
PUSHSLICE xc0000000000000000000000000a4978935
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro pending_owner
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 15
PUSHSLICE xc0000000000000000000000000be875120
NEWC
STSLICE
PUSH S1
STSLICER
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro registered
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 16
PUSHSLICE xc0000000000000000000000000e0078569
NEWC
STSLICE
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro expiry
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 17
PUSHSLICE xc0000000000000000000000000aa4a77c6
NEWC
STSLICE
PUSH S1
STUR 32
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro values
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 18
PUSHSLICE xc0000000000000000000000000ec89df22
NEWC
STSLICE
PUSH S1
SWAP
STDICT
ENDC
PUSHINT 0
SENDRAWMSG
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 501791343
LEQ
PUSHCONT {
	DUP
	PUSHINT 141807997
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 43487892
		EQUAL
		IFJMPREF {
			CALL $whois$
		}
		DUP
		PUSHINT 56837556
		EQUAL
		IFJMPREF {
			CALL $getParent$
		}
		DUP
		PUSHINT 141807997
		EQUAL
		IFJMPREF {
			CALL $withdraw$
		}
	}
	IFJMP
	DUP
	PUSHINT 235141880
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 201847874
		EQUAL
		IFJMPREF {
			CALL $inquiryExpiry$
		}
		DUP
		PUSHINT 227486880
		EQUAL
		IFJMPREF {
			CALL $parent$
		}
		DUP
		PUSHINT 235141880
		EQUAL
		IFJMPREF {
			CALL $setValue$
		}
	}
	IFJMP
	DUP
	PUSHINT 501791343
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 388172858
		EQUAL
		IFJMPREF {
			CALL $upgrade$
		}
		DUP
		PUSHINT 453826860
		EQUAL
		IFJMPREF {
			CALL $transferOwner$
		}
		DUP
		PUSHINT 501791343
		EQUAL
		IFJMPREF {
			CALL $setTarget$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1049055520
LEQ
PUSHCONT {
	DUP
	PUSHINT 694778722
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 613910837
		EQUAL
		IFJMPREF {
			CALL $value$
		}
		DUP
		PUSHINT 649397185
		EQUAL
		IFJMPREF {
			CALL $setExpiry$
		}
		DUP
		PUSHINT 694778722
		EQUAL
		IFJMPREF {
			CALL $getPendingOwner$
		}
	}
	IFJMP
	DUP
	PUSHINT 832830675
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 709523398
		EQUAL
		IFJMPREF {
			CALL $expiry$
		}
		DUP
		PUSHINT 712770447
		EQUAL
		IFJMPREF {
			CALL $prolong$
		}
		DUP
		PUSHINT 832830675
		EQUAL
		IFJMPREF {
			CALL $addBalance$
		}
	}
	IFJMP
	DUP
	PUSHINT 1049055520
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 925457952
		EQUAL
		IFJMPREF {
			CALL $root$
		}
		DUP
		PUSHINT 1001729574
		EQUAL
		IFJMPREF {
			CALL $getRegistered$
		}
		DUP
		PUSHINT 1049055520
		EQUAL
		IFJMPREF {
			CALL $pending_owner$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1760965402
LEQ
PUSHCONT {
	DUP
	PUSHINT 1510054060
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1118824496
		EQUAL
		IFJMPREF {
			CALL $getName$
		}
		DUP
		PUSHINT 1460070504
		EQUAL
		IFJMPREF {
			CALL $subCertSynchronize$
		}
		DUP
		PUSHINT 1510054060
		EQUAL
		IFJMPREF {
			CALL $auctionProcess$
		}
	}
	IFJMP
	DUP
	PUSHINT 1611105641
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1543771415
		EQUAL
		IFJMPREF {
			CALL $getExpiry$
		}
		DUP
		PUSHINT 1594609630
		EQUAL
		IFJMPREF {
			CALL $owner$
		}
		DUP
		PUSHINT 1611105641
		EQUAL
		IFJMPREF {
			CALL $registered$
		}
	}
	IFJMP
	DUP
	PUSHINT 1760965402
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1656985116
		EQUAL
		IFJMPREF {
			CALL $getOwner$
		}
		DUP
		PUSHINT 1756716863
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
		DUP
		PUSHINT 1760965402
		EQUAL
		IFJMPREF {
			CALL $getValue$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 2059023066
LEQ
PUSHCONT {
	DUP
	PUSHINT 1809145905
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1802285830
		EQUAL
		IFJMPREF {
			CALL $setOwner$
		}
		DUP
		PUSHINT 1809145905
		EQUAL
		IFJMPREF {
			CALL $acceptOwner$
		}
	}
	IFJMP
	DUP
	PUSHINT 1943987147
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1820974882
		EQUAL
		IFJMPREF {
			CALL $values$
		}
		DUP
		PUSHINT 1943987147
		EQUAL
		IFJMPREF {
			CALL $getTarget$
		}
	}
	IFJMP
	DUP
	PUSHINT 2038805492
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1950458398
		EQUAL
		IFJMPREF {
			CALL $getRoot$
		}
		DUP
		PUSHINT 2038805492
		EQUAL
		IFJMPREF {
			CALL $name$
		}
	}
	IFJMP
	DUP
	PUSHINT 2059023066
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 2055522086
		EQUAL
		IFJMPREF {
			CALL $subCertRequest$
		}
		DUP
		PUSHINT 2059023066
		EQUAL
		IFJMPREF {
			CALL $requestUpgrade$
		}
	}
	IFJMP
}
IFJMP
